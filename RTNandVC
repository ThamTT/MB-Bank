package mb.auto.t24.common_routine;

import cucumber.api.java.en.And;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import cucumber.api.java.en_old.Ac;
import cucumber.api.java.eo.Se;
import cucumber.common.ActionCommon;
import cucumber.singleton.BaseStringUtils;
import cucumber.singleton.PageTitles;
import cucumber.tasks.InputToCommandT24;
import cucumber.user_interface_dform.DFormCommons;
import cucumber.user_interface_dform.DFormMenuComponent;
import cucumber.user_interface_dform.RutTienHeoDatComponent;
import cucumber.user_interface_t24cam.T24CamRates;
import cucumber.user_interface_t24vn.*;
import io.cucumber.datatable.DataTable;
import mb.auto.t24.customer.CustomerMdtIndiv3Definitions;
import mb.auto.t24.md_deal.MdDealStepDefinitions;
import mb.t24vn.steps.background.CommonStepDefinitions;
import net.serenitybdd.core.Serenity;
import net.serenitybdd.screenplay.actions.Click;
import net.serenitybdd.screenplay.actions.Enter;
import net.serenitybdd.screenplay.ensure.Ensure;
import net.serenitybdd.screenplay.ensure.web.ElementsLocated;
import net.serenitybdd.screenplay.matchers.WebElementStateMatchers;
import net.serenitybdd.screenplay.questions.Text;
import net.serenitybdd.screenplay.targets.Target;
import net.serenitybdd.screenplay.waits.WaitUntil;
import net.thucydides.core.annotations.Steps;
import org.apache.poi.ss.formula.functions.T;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.junit.Assert;
import org.junit.AssumptionViolatedException;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;

import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.util.*;

import static cucumber.user_interface_t24vn.AccountComponent.*;
import static cucumber.user_interface_t24vn.LDComponent.fieldWithLabel;
import static net.serenitybdd.screenplay.actors.OnStage.theActorInTheSpotlight;
import static net.serenitybdd.screenplay.matchers.WebElementStateMatchers.isNotVisible;
import static net.serenitybdd.screenplay.matchers.WebElementStateMatchers.isVisible;
import static net.thucydides.core.webdriver.ThucydidesWebDriverSupport.getDriver;

public class RoutineAndVersionControl {
    private String idLD;
    public static String value_amount = "";
    @Steps
    ActionCommon actionCommon;
    @Steps
    ActionCommonRTN actionCommonRTN;

    public void setIdFields(List<String> idFields) {
        this.idFields = idFields;
    }

    private List<String> idFields;
    private List<String> valueFields;

    public List<String> getIdFields() {
        return idFields;
    }

    public List<String> getValueFields() {
        return valueFields;
    }

    public String getTab(String field) {
        if (field.contains("fieldName")) {
            return field.substring(0, field.indexOf("_"));
        }
        if (field.contains("radio")) {
            String tab = field.substring(field.indexOf("radio:") + 6);
            return tab.substring(0, tab.indexOf(":"));
        }
        if (field.contains("headtab")) {
            return field.substring(field.indexOf("headtab_") + 8); //headtab_.length = 8
        }
        if (field.contains("ExpandMulti")) {
            // ExpandMulti_mainTab_abc
            field = field.replace("ExpandMulti_", "");
            return field.substring(0, field.indexOf("_")); //mainTab_abc = mainTab
        }
        if (field.contains("ExpandSub")) {
            // ExpandMulti_mainTab_abc
            field = field.replace("ExpandSub_", "");
            return field.substring(0, field.indexOf("_")); //mainTab_abc = mainTab
        }
        return "";
    }

    public String getIDField(String field) {
        // ExpandMulti_mainTab_abc
        if (field.contains("ExpandMulti")) {
            field = field.replace("ExpandMulti_", "");
            return field.substring(field.indexOf("_") + 1); //mainTab_abc = abc
        }
        if (field.contains("ExpandSub")) {
            field = field.replace("ExpandSub_", "");
            return field.substring(field.indexOf("_") + 1); //mainTab_abc = abc
        }
        return field.contains("fieldName") ? field.substring(field.indexOf("_") + 1) : field;
    }

    public String getTagName(String xpath) {
        ActionCommon actionCommon = new ActionCommon();
        WebElement element = actionCommon.getElement(xpath);
        return element.getTagName();
    }

    public List<Target> getXpaths(List<String> idFields, List<String> valueFields) {
        List<Target> listXpath = new ArrayList<>();
        for (int index = 1; index < idFields.size(); index++) {
            String tabName = getTab(idFields.get(index));
            String idField = getIDField(idFields.get(index));

            if (idFields.get(index).contains("fieldName")) {
                listXpath.add(CustomerComponent.CustomerForm.elementCustomerDynamic(tabName, idField));
            }
            if (idFields.get(index).contains("radio")) {
                listXpath.add(HomePageT24Form.selectRadioButtonByID(tabName, idField, valueFields.get(index - 1)));
            }
            if (idFields.get(index).contains("headtab")) {
                listXpath.add(HomePageT24Form.selectTab(tabName));
            }
            if (idFields.get(index).contains("ExpandMulti")) {
                listXpath.add(HomePageT24Form.clickExpandMulti(tabName, idField));
            }
            if (idFields.get(index).contains("ExpandSub")) {
                listXpath.add(HomePageT24Form.clickExpandSub(tabName, idField));
            }
        }
        return listXpath;
    }

    @Given("Lấy data từ file excel {string},sheet version {word},mã testcase {word}")
    public void layDataTuFileExcel(String fileName, String sheetNameVerison, String maTC) {
        ActionCommon actionCommon = new ActionCommon();
        Iterator<Row> iterator = actionCommon.getSheetExcel(fileName, sheetNameVerison);
        List<String> idFields = new ArrayList<>();
        List<String> valueFields = new ArrayList<>();

        Row row2 = iterator.next();
        Iterator<Cell> cellIterator = row2.cellIterator();
        while (cellIterator.hasNext()) {
            Cell cell = cellIterator.next();
            idFields.add(cell.getStringCellValue());
        }

        // Lấy data và mã TC
        while (iterator.hasNext()) {
            Row row = iterator.next();
            if (row.getCell(0).getStringCellValue().equals(maTC)) {
                for (int indexColumn = 1; indexColumn < idFields.size(); indexColumn++) {
                    try {
                        valueFields.add(row.getCell(indexColumn).getStringCellValue());
                    } catch (NullPointerException e) {
                        valueFields.add(null);
                        ActionCommon.printLog("Value field: " + idFields.get(indexColumn) + " is null.");
                    }
                }
                break;
            }
        }

        setIdFields(idFields); // set id fields
        setValueFields(valueFields); // set value fields

    }

    public void setValueFields(List<String> valueFields) {
        this.valueFields = valueFields;
    }

    @When("Nhập LD")
    public void nhapLD() throws ParseException {
        Serenity.setSessionVariable("ID LD").to(actionCommon.getAttributeElement(FundsTransferComponent.FT_TEXT_XPATH, "value"));
        Serenity.recordReportData().withTitle("Mã LD").andContents(Serenity.sessionVariableCalled("ID LD"));
        inputData();
    }

    @And("Nhap thong tin ky han la {string}")
    public void nhapThongTinKyHanLa(String arg0) throws ParseException {
        inputData();
    }

    @And("Change data excel")
    public void getDataDeal() {
        try {
            actionCommon.getCurrentDateTimeT24Plus(BaseStringUtils.FOMART_DATE_YYYYMMDD);
        } catch (ParseException e) {
        }

        for (int index = 0; index < valueFields.size(); index++) {
//            if (valueFields.get(index).contains("year-")) {
//                valueFields.set(index, Serenity.sessionVariableCalled("YEAR PLUS").toString());
//            } else if (valueFields.get(index) == null || valueFields.get(index).equals("")) {
//                continue;
//            }

            if (valueFields.get(index) == null || valueFields.get(index).equals("")) {
                continue;
            } else {
                if (valueFields.get(index).contains("year-")) {
                    valueFields.set(index, Serenity.sessionVariableCalled("YEAR PLUS").toString());
                } else {
                    continue;
                }
            }
        }
    }

    public void inputData() {
        //NHAP VALUE CAC TRUONG
        List<Target> listXpath = getXpaths(getIdFields(), getValueFields());
        List<String> valueFields = getValueFields();
        for (int index = 0; index < listXpath.size(); index++) {
            String tagName;
            String targetText = listXpath.get(index).getCssOrXPathSelector();
            String valueField = valueFields.get(index);

            /* Thêm dòng này để fix trường hợp nhập các trường bắt buộc load lại form thì sẽ đợi form hiển thị ra mới làm tiếp
               Nếu ko đợi sẽ chết ở hàm getTagName do ko tìm thấy xpath */
//            actionCommon.waitVisible(HomePageT24Form.GO_BUTTON);
            theActorInTheSpotlight().attemptsTo(WaitUntil.the(HomePageT24Form.GO_BUTTON, WebElementStateMatchers.isVisible()).forNoMoreThan(180).seconds());

            if (valueField == null || valueField.equals("")) {
                continue;
            }
            if (valueField.equals("clearText")) {
                actionCommon.pause(1000);
                actionCommon.getElement(listXpath.get(index).getCssOrXPathSelector()).clear();
                continue;
            }
            if (valueField.equalsIgnoreCase("Today")) {
                actionCommon.pause(1000);
                actionCommon.scrollBarByJs(listXpath.get(index));
                String fieldName = actionCommon.getElement(listXpath.get(index).getCssOrXPathSelector() + "/../..//label//a").getAttribute("textContent"); // Get text field
                String tabId = actionCommon.getElement(listXpath.get(index).getCssOrXPathSelector() + "/ancestor::tr[contains(@tabid,'tab') or contains(@tabid,'Tab')]").getAttribute("tabid"); // Get tabid
                HomePageT24Form.selectTodayCalenderDate(tabId, fieldName);
                Actions actions = new Actions(getDriver());
                actions.sendKeys(Keys.TAB).perform();
                continue;
            }
            if (valueField.equalsIgnoreCase("Today-1")) {
                actionCommon.pause(1000);
                actionCommon.scrollBarByJs(listXpath.get(index));
                String fieldName = actionCommon.getElement(listXpath.get(index).getCssOrXPathSelector() + "/../..//label//a").getAttribute("textContent"); // Get text field
                String tabId = actionCommon.getElement(listXpath.get(index).getCssOrXPathSelector() + "/ancestor::tr[contains(@tabid,'tab') or contains(@tabid,'Tab')]").getAttribute("tabid"); // Get tabid
                try {
                    HomePageT24Form.selectTodayMinus1CalenderDateGetByValue(tabId, fieldName);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                continue;
            }
            if (targetText.contains("fieldName")) {
                tagName = getTagName(targetText);
                if (tagName.equals("input") || tagName.equals("textarea")) { // Thẻ input
                    actionCommon.typeText(listXpath.get(index), valueField);
                } else { // Thẻ select
                    if (valueField.trim().equals("selectionDefault")) { // textValue == ""
                        actionCommon.selectIndexOption(listXpath.get(index), 0);
                    } else {
                        actionCommon.selectValueOption(listXpath.get(index), valueField); // textValue != ""
                    }
                }
                Actions actions = new Actions(getDriver());
                actions.sendKeys(Keys.TAB).perform();
            }
            if (targetText.contains("radio")) {
                actionCommon.clickElement(listXpath.get(index));
//                actionCommon.pressKeys(listXpath.get(index), Keys.TAB);
            }
            if (targetText.contains("headtab") || targetText.contains("Expand Multi Value")
                    || targetText.contains("Expand Sub Value")) {
                actionCommon.scrollBarByJs(listXpath.get(index));
                actionCommon.clickElement(listXpath.get(index));
                Actions actions = new Actions(getDriver());
                actions.sendKeys(Keys.TAB).perform();
            }
        }
    }

    @And("Nhập các thông tin khác CHARGE.DATE, CHARGE.AMOUNT")
    public void inputChargeDateAndChargeAmountData() {
        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }
            if (valueFields.get(i).equals("${amount}")) {
                valueFields.set(i, actionCommon.getValueSection("SODU.KHADUNG.SMALLER"));
            }
        }
        inputData();

        Serenity.setSessionVariable("charge amount with delivery").to(actionCommon.getTextOf(HomePageT24Form.DATE_AMOUNT));
        Serenity.recordReportData().withTitle("charge amount with delivery").andContents(Serenity.sessionVariableCalled("charge amount with delivery"));

        Serenity.setSessionVariable("charge date with delivery").to(actionCommon.getTextOf(HomePageT24Form.DATE_AMOUNT_CHARGE));
        Serenity.recordReportData().withTitle("charge date with delivery").andContents(Serenity.sessionVariableCalled("charge date with delivery"));
        actionCommon.clickElement(HomePageT24Form.THU_PHAT_CHAM);

    }

    public String getValueFieldByFieldName1(String fieldName) {
        List<String> valueFields = getValueFields();
        List<String> idFields = getIdFields();
        String valueField = "";
        for (int index = 0; index < idFields.size(); index++) {
            if (idFields.get(index).contains(fieldName)) {
                valueField = valueFields.get(index - 1);
            }
        }
        return valueField;
    }

    @When("Nhập bảng MB Ủy Quyền")
    public void nhapBangMBUyQuyen() throws ParseException {
        nhapLD();
    }

    @Then("Field {string} không được cập nhật")
    public void fieldKhongDuocCapNhat(String field) {
        String valuePreSchDate = actionCommon.getAttributeElement("//*[text()='" + field + "']/ancestor::td/following-sibling::td//input", "value");
        theActorInTheSpotlight().attemptsTo(Ensure.that(valuePreSchDate).isEmpty());
    }

    @When("Nhập các trường trong bảng MB.CHARGE.EARLY.REPAYMENT")
    public void nhapFieldInMbChargeEarlyRepayment() throws ParseException {
        nhapLD();
    }

    @And("Nhập FT")
    public void nhapFT() throws ParseException {

        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }
            /**
             * Call session_AnhDTN6
             */
            if (valueFields.get(i).contains("session-")) {
                valueFields.set(i, actionCommon.getValueSection(valueFields.get(i).split("-", 2)[1]));
            }
            if (valueFields.get(i).contains("Session-")) {
                valueFields.set(i, actionCommon.getValueSection(valueFields.get(i).split("-", 2)[1]));
            }
            if (valueFields.get(i).equals("DEBIT.ACCT.NO.VALUE")) {
                valueFields.set(i, Serenity.sessionVariableCalled("DEBIT.ACCT.NO.VALUE"));
            }
            if (valueFields.get(i).equals("CREDIT.ACCT.NO.VALUE")) {
                valueFields.set(i, Serenity.sessionVariableCalled("CREDIT.ACCT.NO.VALUE"));
            }
            if (valueFields.get(i).equals("CHQ.SERI")) {
                valueFields.set(i, Serenity.sessionVariableCalled("CHQ.SERI"));
            }
            if (valueFields.get(i).equals("CHEQUE.NUMBER")) {
                valueFields.set(i, Serenity.sessionVariableCalled("CHEQUE.NUMBER"));
            }

            //FUNDS.TRANSFER.BIDV.103
            if (valueFields.get(i).equals("debit")) {
                valueFields.set(i, Serenity.sessionVariableCalled("customerAccount"));
            }
            if (valueFields.get(i).equals("credit")) {
                valueFields.set(i, Serenity.sessionVariableCalled("customerAccount2"));
            }
            if (valueFields.get(i).equals("RandomAcc")) {
                valueFields.set(i, Serenity.sessionVariableCalled("RandomAcc"));
            }
            if (valueFields.get(i).contains("${account1}")) {
                valueFields.set(i, actionCommon.getValueSection("account1"));
            }
            if (valueFields.get(i).contains("${account2}")) {
                valueFields.set(i, actionCommon.getValueSection("account2"));
            }
            if (valueFields.get(i).contains("${ID}")) {
                valueFields.set(i, actionCommon.getValueSection("ID"));
            }
            if (valueFields.get(i).contains("${>Maximum Total}")) {
                String availBalance = actionCommon.getValueSection("Maximum Total");
                if (availBalance.contains(",")) {
                    availBalance = availBalance.replaceAll(",", "");
                }
                double beditAmount = Double.parseDouble(availBalance) + 100;
                String value = String.format("%.0f", beditAmount);
                valueFields.set(i, value);
            }
            if (valueFields.get(i).contains("${AcctList}")) {
                String[] email = actionCommon.getValueSection("Email").split("#");
                ActionCommon.printLog("email: " + email);
                valueFields.set(i, email[0]);
            }
            if (valueFields.get(i).contains("${CodeList}")) {
                String[] note = actionCommon.getValueSection("Note").split("#");
                ActionCommon.printLog("note: " + note);
                valueFields.set(i, "01" + note[0] + "001");
            }
            if (valueFields.get(i).contains("RandomNum-")) {
                String generateRandomCharacter = CustomerMdtIndiv3Definitions.generateRandomNumber(Integer.parseInt(valueFields.get(i).split("-", 2)[1]));
                valueFields.set(i, generateRandomCharacter);
            }
            if (valueFields.get(i).contains("RandomChar-")) {
                String generateRandomCharacter = CustomerMdtIndiv3Definitions.generateRandomCharacter(Integer.parseInt(valueFields.get(i).split("-", 2)[1]));
                actionCommon.setValueSection("generateRandomCharacter: ", generateRandomCharacter);
                actionCommon.setValueSection("generateRandomCharacter length: ", String.valueOf(generateRandomCharacter.length()));
                ActionCommon.printLog("generateRandomCharacter length: " + String.valueOf(generateRandomCharacter.length()));
                ActionCommon.printLog("generateRandomCharacter: " + generateRandomCharacter);
                valueFields.set(i, generateRandomCharacter);
            }
            if (valueFields.get(i).equals("${<Emb Amt High}")) {
                String strEmbAmtHigh = actionCommon.getValueSection("Emb Amt High").replaceAll(",", "").trim();
                long embAmtHigh = Long.parseLong(strEmbAmtHigh) - 100;
                valueFields.set(i, String.valueOf(embAmtHigh));
            }

        }
        //Display ID FT
        WaitUntil.the(FundsTransferComponent.FT_TEXT_XPATH, WebElementStateMatchers.isPresent()).forNoMoreThan(120).seconds();
        Serenity.setSessionVariable("ID FT").to(actionCommon.getAttributeElement(FundsTransferComponent.FT_TEXT_XPATH, "value"));
        Serenity.recordReportData().withTitle("Mã FT").andContents(Serenity.sessionVariableCalled("ID FT"));
        inputData();
    }

    @And("Nhập Collateral")
    public void nhapColateral() throws ParseException {
        //Display ID FT
        Serenity.setSessionVariable("ID Collateral").to(actionCommon.getAttributeElement(FundsTransferComponent.FT_TEXT_XPATH, "value"));
        Serenity.recordReportData().withTitle("Mã Collateral").andContents(Serenity.sessionVariableCalled("ID Collateral"));
        inputData();
    }

    @And("Nhập Bảng kê")
    public void nhapBangke() throws ParseException {
        //Display ID Bang ke
        Serenity.setSessionVariable("ID Bangke").to(actionCommon.getAttributeElement(FundsTransferComponent.FT_TEXT_XPATH, "value"));
        Serenity.recordReportData().withTitle("Mã bảng kê").andContents(Serenity.sessionVariableCalled("ID Bangke"));
        inputData();
    }

    @And("Input data Bảng kê")
    public void inputDataBangKe() throws ParseException {
        inputData();
    }

    @And("Nhập limit")
    public void nhapLimit() throws ParseException {
        //Display ID limit
        Serenity.setSessionVariable("ID Limit").to(actionCommon.getAttributeElement(FundsTransferComponent.FT_TEXT_XPATH_LIMIT, "value"));
        Serenity.recordReportData().withTitle("Mã limit").andContents(Serenity.sessionVariableCalled("ID Limit"));
        inputData();
    }

    @And("nhập product allowed {}")
    public void inputProductAlloWed(String input) {
        actionCommon.typeText(Target.the("input product alloWed").locatedBy("//*[@id=\"fieldName:PRODUCT.ALLOWED:1\"]"), input);
    }

    @And("Nhập bonds")
    public void nhapBonds() throws ParseException {
        //Display ID limit
        Serenity.setSessionVariable("ID Bonds").to(actionCommon.getAttributeElement(FundsTransferComponent.FT_TEXT_XPATH, "value"));
        Serenity.recordReportData().withTitle("Mã Bonds").andContents(Serenity.sessionVariableCalled("ID Bonds"));
        inputData();
    }

    @And("input value date bonds {}")
    public void inputDateBonds(String dates) {
        actionCommon.clearText("//*[@id=\"fieldName:VALUE.DATE\"]");
        actionCommon.typeText(Target.the("date").locatedBy("//*[@id=\"fieldName:VALUE.DATE\"]"), dates);
    }


    @And("clear and input date bonds {} , maturity date {}")
    public void inputDateBondsAndMaturity(String dates, String maturity) {
        actionCommon.clearText(" (//*[@id=\"fieldName:VALUE.DATE\"])[1]");
        actionCommon.typeText(Target.the("date").locatedBy(" (//*[@id=\"fieldName:VALUE.DATE\"])[1]"), dates);
        actionCommon.clearText("(//*[@id=\"fieldName:MATURITY.DATE\"])[1]");
        actionCommon.typeText(Target.the("date").locatedBy("(//*[@id=\"fieldName:MATURITY.DATE\"])[1]"), maturity);
    }


//

    @And("Nhập AZ account")
    public void nhapAzAccount() {
        //Display ID az account
        String azAccount = actionCommon.getAttributeElement(FundsTransferComponent.FT_TEXT_XPATH, "value");
        if (!azAccount.contains("FT")) {
            Serenity.setSessionVariable("ID AZ account").to(actionCommon.getAttributeElement(FundsTransferComponent.FT_TEXT_XPATH, "value"));
            Serenity.setSessionVariable("ID Record").to(actionCommon.getAttributeElement(FundsTransferComponent.FT_TEXT_XPATH, "value"));
            Serenity.recordReportData().withTitle("Mã AZ account").andContents(Serenity.sessionVariableCalled("ID AZ account"));
        } else if (azAccount.contains("FT")) {
            Serenity.setSessionVariable("ID FT").to(actionCommon.getAttributeElement(FundsTransferComponent.FT_TEXT_XPATH, "value"));
        }
        inputData();
        if (getDriver().findElements(By.xpath(AccountComponent.CUSTOMER_ID.getCssOrXPathSelector())).size() > 0) {
            Serenity.setSessionVariable("ID Customer").to(actionCommon.getAttributeElement(AccountComponent.CUSTOMER_ID.getCssOrXPathSelector(), "value"));
            Serenity.recordReportData().withTitle("Mã KH").andContents(Serenity.sessionVariableCalled("ID Customer"));
        }
    }


    @And("Nhập trường Deposit Product")
    public void inputDepositProduct() {
        actionCommon.typeText(AccountComponent.DEPOSIT_PRODUCT, "FLEX.SAV.MTH.INT");
    }

    @And("Nhập account")
    public void nhậpAccount() {
        inputData();
        Serenity.setSessionVariable("ID Customer").to(actionCommon.getAttributeElement(AccountComponent.CUSTOMER_ID.getCssOrXPathSelector(), "value"));
        Serenity.recordReportData().withTitle("Mã KH").andContents(Serenity.sessionVariableCalled("ID Customer"));
    }

    @And("Luu ma giao dich trong ngay")
    public void luuMaGiaoDichTrongNgay() {
        String maGiaoDich = Text.of(actionCommon.getValueByField("Ma giao dich:", "mainTab")).viewedBy(theActorInTheSpotlight()).asString().trim();
        Serenity.setSessionVariable("ID Record").to(maGiaoDich);
        actionCommon.setValueSection("ID Record", maGiaoDich);
        Serenity.recordReportData().withTitle("ID Record").andContents(maGiaoDich);
    }

    @And("Luu ma giao dich")
    public void luuMaGiaoDichTrongNgay2() {
        String maGiaoDich = actionCommon.getAttributeElement(BangKeComponent.MA_GD_1, "value");
        Serenity.setSessionVariable("ID Record").to(maGiaoDich);
        actionCommon.setValueSection("ID Record", maGiaoDich);
        Serenity.recordReportData().withTitle("ID Record").andContents(maGiaoDich);
    }

    @And("Nhập thông tin input")
    public void nhapThongTinInput() {
        valueFields.set(0, Serenity.sessionVariableCalled("Account Id")).toString();
        inputData();
    }


    @And("Nhập thông tin")
    public void nhapThongTin() {
        inputData();
    }

    @And("Nhập thông tin CHG")
    public void inputCHG() {
        Serenity.setSessionVariable("ID CHG").to(actionCommon.getAttributeElement(FundsTransferComponent.FT_TEXT_XPATH, "value"));
        Serenity.setSessionVariable("ID Record").to(actionCommon.getAttributeElement(FundsTransferComponent.FT_TEXT_XPATH, "value"));
        Serenity.recordReportData().withTitle("Mã CHG").andContents(Serenity.sessionVariableCalled("ID CHG"));
        inputData();
    }


    @And("Nhập thông tin với data mới")
    public void nhapThongTinVoiDataMoi() {
        int min = actionCommon.getNumInRange(10, 100);
        for (int i = 0; i < idFields.size(); i++) {
            if (idFields.get(i).contains("fieldName:PTTK:$last-")) {
                String index = actionCommon.getValueSection("NumberOfPttk");
                String minusNum = idFields.get(i).substring(idFields.get(i).length() - 1);
                int indexNumber = Integer.parseInt(index);
                int minusNumber = Integer.parseInt(minusNum);
                int finalIndex = indexNumber - minusNumber;
                String newIdField = idFields.get(i).replace("$last-" + minusNum, finalIndex + "");
                idFields.set(i, newIdField);
            } else if (idFields.get(i).contains("fieldName:PTTK:$last")) {
                String index = actionCommon.getValueSection("NumberOfPttk");
                idFields.set(i, idFields.get(i).replace("$last", index));
            }
        }
        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }

            /**
             * Call session_MD Deal
             */
/**
 * Call session_AnhDTN6
 */
            if (valueFields.get(i).contains("session#")) {
                valueFields.set(i, actionCommon.getValueSection(valueFields.get(i).split("#", 2)[1]));
            }

            if (valueFields.get(i).equalsIgnoreCase("random_customer")) {
                valueFields.set(i, actionCommon.getValueSection("id_cus"));
            }

            if (valueFields.get(i).equalsIgnoreCase("$Today")) {
                valueFields.set(i, Serenity.sessionVariableCalled("DATE PLUS 0"));
            }
            if (valueFields.get(i).equalsIgnoreCase("$LEGACY")) {
                valueFields.set(i, Serenity.sessionVariableCalled("TD_ID"));
            }
            if (valueFields.get(i).equalsIgnoreCase("$ACCOUNT")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Account"));
            }

            if (valueFields.get(i).equalsIgnoreCase("$CAMPAIGN.CODE")) {
                valueFields.set(i, actionCommon.getValueSection("CAMPAIN.CODE"));
            }

            /**
             * Call session_AnhDTN6
             */
            if (valueFields.get(i).equals("$MonthPlus")) {
                String currentDate = actionCommon.getValueSection("date time today");
                String dateTime = null;
                try {
                    dateTime = actionCommon.getDateTimeT24AddMonths(currentDate, BaseStringUtils.FOMART_DATE_YYYYMMDD, 1);
                } catch (ParseException e) {

                }
                valueFields.set(i, dateTime);
            }

            if (valueFields.get(i).equals("$ProjectIDSME")) {
                valueFields.set(i, Serenity.sessionVariableCalled("IdProject"));
            }
            //=======
            if (valueFields.get(i).contains("Random Text")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomString(8));
            }
            if (valueFields.get(i).contains("Random Num")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(6));
            }
            if (valueFields.get(i).equalsIgnoreCase("Random11")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(11));
            }
            if (valueFields.get(i).contains("Random_Decimal")) {
                String prefix = String.valueOf(actionCommon.getNumInRange(0, 5));
                String suffix = String.valueOf(actionCommon.getNumInRange(0, 9));
                prefix = prefix.length() == 1 ? 0 + prefix : prefix;
                suffix = suffix.length() == 1 ? 0 + suffix : suffix;
                valueFields.set(i, prefix + "." + suffix);
            }
            if (valueFields.get(i).contains("Random_Working_Balance")) {
                long workingBalance = Long.parseLong(actionCommon.getValueSection("OUT.COL1").replaceAll(",", ""));
                valueFields.set(i, String.valueOf(workingBalance));
            }
            if (valueFields.get(i).equals("LD_ID")) {
                valueFields.set(i, Serenity.sessionVariableCalled("LD_ID"));
            }
            if (valueFields.get(i).equals("Fill Greater Today")) {
                valueFields.set(i, Serenity.sessionVariableCalled("DATE PLUS 1"));
            }
            if (valueFields.get(i).equals("$datePlusYear")) {
                valueFields.set(i, Serenity.sessionVariableCalled("datePlusYear1"));
            }
            if (valueFields.get(i).equals("Fill Greater Advice")) {
                valueFields.set(i, Serenity.sessionVariableCalled("DATE PLUS 2"));
            }
            if (valueFields.get(i).contains("Random Contract")) {
                valueFields.set(i, actionCommon.getTextWithTime("HopDong"));
            }
            if (valueFields.get(i).equals("Random Cus Name")) {
                valueFields.set(i, actionCommon.getTextWithTime("KhachHang"));
            }
            if (valueFields.get(i).equals("With space Random Cus Name")) {
                valueFields.set(i, actionCommon.getTextWithTime("Khach Hang "));
            }
            if (valueFields.get(i).contains("Random Money")) {
                String randMoney = String.valueOf(actionCommon.getNumInRange(0, 2500));
                valueFields.set(i, randMoney);
                actionCommon.setValueSection("$RandomMoney", randMoney);
            }
            if (valueFields.get(i).contains("Current Year")) {
                valueFields.set(i, String.valueOf(Calendar.getInstance().get(Calendar.YEAR)));
            }
            if (valueFields.get(i).contains("Random Id")) {
                String id_cus = actionCommon.getValueSection("id_cus");
                valueFields.set(i, id_cus);
            }
            if (valueFields.get(i).equals("Random_Id")) {
                String id_cus = actionCommon.getValueSection("randomId");
                valueFields.set(i, id_cus);
            }
            if (valueFields.get(i).equals("$DATE PLUS 0")) {
                valueFields.set(i, Serenity.sessionVariableCalled("DATE PLUS 0"));
            }
            if (valueFields.get(i).equals("$DATE PLUS 365")) {
                valueFields.set(i, Serenity.sessionVariableCalled("DATE PLUS 365"));
            }
            if (valueFields.get(i).equals("$Email")) {
                String s = Serenity.sessionVariableCalled("Email");
                String[] splits = s.split("#");
                int random = 0;
                try {
                    random = SecureRandom.getInstanceStrong().nextInt(splits.length);
                    String email = String.valueOf(splits[random]);
                    actionCommon.setValueSection("Email", email);
                    valueFields.set(i, Serenity.sessionVariableCalled("Email") + ".92");
                } catch (NoSuchAlgorithmException e) {
                }

            }
            if (valueFields.get(i).equals("$IDN92")) {
                valueFields.set(i, Serenity.sessionVariableCalled("IDN") + ".92");
            }
            if (valueFields.get(i).equals("$IDN93")) {
                valueFields.set(i, Serenity.sessionVariableCalled("IDN") + ".93");
            }
            if (valueFields.get(i).contains("Min Amt")) {
                valueFields.set(i, String.valueOf(min));
            }
            if (valueFields.get(i).contains("Max Amt")) {
                valueFields.set(i, String.valueOf(min - 10));
            }
            if (valueFields.get(i).contains("$Customer_Id")) {
                String customerIdd = actionCommon.getValueSection("Customer Id");
                valueFields.set(i, customerIdd);
            }
            if (valueFields.get(i).contains("$Principal_Liq_Acct")) {
                String plAcct = actionCommon.getValueSection("Principal Liq Acct");
                valueFields.set(i, plAcct);
            }
            if (valueFields.get(i).contains("$LD_Number")) {
                String ldCopy = actionCommon.getValueSection("LD COPY");
                valueFields.set(i, ldCopy);
            }
            if (valueFields.get(i).contains("$Loan_Amount")) {
                String loanAmnt = actionCommon.getValueSection("Loan Amount.1");
                valueFields.set(i, loanAmnt);
            }
            if (valueFields.get(i).contains("$MaKHDTT")) {
                String cusId = actionCommon.getValueSection("Customer Id");
                valueFields.set(i, valueFields.get(i).replace("$MaKHDTT", cusId));
            }
            if (valueFields.get(i).contains("$(Random 1 - 100)")) {
                int randNum = actionCommon.getNumInRange(1, 100);
                valueFields.set(i, String.valueOf(randNum));
                actionCommon.setValueSection("$(Random 1 - 100)", String.valueOf(randNum));
            }
            if (valueFields.get(i).contains("$AccountNumber")) {
                String accNum = actionCommon.getValueSection("Account_Number");
                valueFields.set(i, accNum);
            }
            if (valueFields.get(i).contains("$Random_HHmm")) {
                String hour = String.valueOf(actionCommon.getNumInRange(0, 23));
                String minus = String.valueOf(actionCommon.getNumInRange(0, 59));
                hour = hour.length() == 1 ? 0 + hour : hour;
                minus = minus.length() == 1 ? 0 + minus : minus;
                valueFields.set(i, hour + minus);
            }
            if (valueFields.get(i).contains("customerId")) {
                valueFields.set(i, actionCommon.getValueSection("customerId"));
            }
            if (valueFields.get(i).contains("customerNumber")) {
                valueFields.set(i, actionCommon.getValueSection("customerNumber"));
            }
            if (valueFields.get(i).contains("OUT.COL")) {
                String key = valueFields.get(i);
                String value = actionCommon.getValueSection(key);
                valueFields.set(i, value);
            }
            if (valueFields.get(i).contains("$ID")) {
                String id = actionCommon.getValueSection("ID");
                valueFields.set(i, id);
            }
            if (valueFields.get(i).contains("$Account")) {
                String id = actionCommon.getValueSection("Account");
                valueFields.set(i, id);
            }
            if (valueFields.get(i).contains("$MaturityDate")) {
                String date = actionCommon.getValueSection("MaturityDate");
                valueFields.set(i, date);
            }
            if (valueFields.get(i).contains("$IssueDate")) {
                String date = actionCommon.getValueSection("IssueDate");
                valueFields.set(i, date);
            }
            if (valueFields.get(i).contains("$Quantity")) {
                String quantity = actionCommon.getValueSection("Quantity");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).contains("$CurrentDateT24")) {
                String quantity = actionCommon.getValueSection("systemTime");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).contains("$TotalOverdueAmt")) {
                String quantity = actionCommon.getValueSection("TOTAL.OVERDUE.AMT");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).contains("review_frequency")) {
                valueFields.set(i, Serenity.sessionVariableCalled("YEAR PLUS").toString() + "M0101");
            }
            if (valueFields.get(i).contains("$CustomerID")) {
                if (Serenity.sessionVariableCalled("Id_INDIV") != null) {
                    valueFields.set(i, actionCommon.getValueSection("Id_INDIV"));
                } else valueFields.set(i, actionCommon.getValueSection("customerId"));
            }
            if (valueFields.get(i).contains("$IDSME_CUSTOMER")) {
                valueFields.set(i, actionCommon.getValueSection("Id_SME"));
            }
            if (valueFields.get(i).equals("Ma_Sme_Customer")) {
                valueFields.set(i, actionCommon.getValueSection("Id_SME"));
            }
            if (valueFields.get(i).contains("$SMEID_CUSTOMER")) {
                valueFields.set(i, actionCommon.getValueSection("ID_CUS"));
            }
            if (valueFields.get(i).contains("$LimitRef")) {
                valueFields.set(i, actionCommon.getValueSection("Ma limit Ref"));
            }
            if (valueFields.get(i).contains("$fieldName")) {
                valueFields.set(i, actionCommon.getValueSection("Id_record"));
            }
            if (valueFields.get(i).contains("$MD_SME")) {
                valueFields.set(i, actionCommon.getValueSection("MD_SME"));
            }
            if (valueFields.get(i).contains("$MIDSMEAccount1")) {
                valueFields.set(i, actionCommon.getValueSection("ACCOUNT_NUMBER"));
            }
            if (valueFields.get(i).contains("$So_Du_Kha_Dung")) {
                valueFields.set(i, actionCommon.getValueSection("So_Du_Kha_Dung"));
            }

            if (valueFields.get(i).contains("$_So_Du_Kha_Dung_Smaller")) {
                valueFields.set(i, actionCommon.getValueSection("So_Du_Kha_Dung_Smaller"));
            }

            if (valueFields.get(i).equalsIgnoreCase("RadomTerm")) {
                valueFields.set(i, actionCommon.getNumInRange(1, 99) + "M");
            }

            if (valueFields.get(i).contains("$CV19.REPAY.ACC")) {
                String quantity = actionCommon.getValueSection("CV19.REPAY.ACC");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).equalsIgnoreCase("Account")) {
                String quantity = actionCommon.getValueSection("Account");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).contains("$Account_id")) {
                String quantity = actionCommon.getValueSection("Account");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).contains("$loc_data")) {
                String quantity = actionCommon.getValueSection("Id_Md");
                valueFields.set(i, quantity);
            }

            if (valueFields.get(i).contains("$Id_Customer")) {
                String quantity = actionCommon.getValueSection("Id_Customer");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).contains("Customer")) {
                String quantity = actionCommon.getValueSection("Customer");
                valueFields.set(i, quantity);
            }

            if (valueFields.get(i).contains("$LoaiGiayTo")) {
                String quantity = actionCommon.getValueSection("giuho-loai-hientai");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).contains("$SoLuongGiayTo")) {
                String quantity = actionCommon.getValueSection("giuho-sl-hientai");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).contains("$SoGiayTo-1")) {
                String quantity = actionCommon.getValueSection("giuho-sl-hientai");
                int soluong = Integer.parseInt(quantity) - 1;
                valueFields.set(i, String.valueOf(soluong));
            }
            if (valueFields.get(i).contains("$Random_Email")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomString(6).toLowerCase(Locale.ROOT) + "@gmail.com");
            }
            if (valueFields.get(i).contains("year-")) {
                valueFields.set(i, Serenity.sessionVariableCalled("YEAR PLUS").toString());
            }
            if (valueFields.get(i).equalsIgnoreCase("$projectId")) {
                valueFields.set(i, actionCommon.getValueSection("Id"));
            }
            if (valueFields.get(i).equalsIgnoreCase("projectId")) {
                valueFields.set(i, actionCommon.getValueSection("transactionId"));
            }
            if (valueFields.get(i).contains("$IdMbCustomer")) {
                String quantity = actionCommon.getValueSection("Customer");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).contains("$VLDate")) {
                String quantity = actionCommon.getValueSection("VALUE DATE");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).contains("$ChargeAccount")) {
                String quantity = actionCommon.getValueSection("Account_number");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).contains("$Id_Customer")) {
                String quantity = actionCommon.getValueSection("Id_Customer");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).equals("Customer")) {
                String quantity = actionCommon.getValueSection("Customer");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).contains("$LoaiGiayTo")) {
                String quantity = actionCommon.getValueSection("giuho-loai-hientai");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).contains("$SoLuongGiayTo")) {
                String quantity = actionCommon.getValueSection("giuho-sl-hientai");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).contains("$SoGiayTo-1")) {
                String quantity = actionCommon.getValueSection("giuho-sl-hientai");
                int soluong = Integer.parseInt(quantity) - 1;
                valueFields.set(i, String.valueOf(soluong));
            }
            if (valueFields.get(i).contains("$Random_Email")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomString(6).toLowerCase(Locale.ROOT) + "@gmail.com");
            }
            if (valueFields.get(i).equalsIgnoreCase("$projectId")) {
                valueFields.set(i, actionCommon.getValueSection("Id"));
            }
            if (valueFields.get(i).equalsIgnoreCase("projectId")) {
                valueFields.set(i, actionCommon.getValueSection("transactionId"));
            }
            if (valueFields.get(i).contains("$IdMbCustomer")) {
                String quantity = actionCommon.getValueSection("Customer");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).contains("$VLDate")) {
                String quantity = actionCommon.getValueSection("VALUE DATE");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).contains("$ChargeAccount")) {
                String quantity = actionCommon.getValueSection("Account_number");
                valueFields.set(i, quantity);
            }

            if (valueFields.get(i).contains("$M0101")) {
                String quantity = actionCommon.getValueSection("More than today") + "M0101";
                valueFields.set(i, quantity);
            }

            if (valueFields.get(i).contains("$chargeAccount1")) {
                String quantity = actionCommon.getValueSection("Account_ID");
                valueFields.set(i, quantity);
            }

            if (valueFields.get(i).equalsIgnoreCase("TaiKhoan1")) {
                String quantity = actionCommon.getValueSection("TaiKhoan1");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).equalsIgnoreCase("TaiKhoan2")) {
                String quantity = actionCommon.getValueSection("TaiKhoan2");
                valueFields.set(i, quantity);
            }
//            -----TramNBB------
            if (valueFields.get(i).equalsIgnoreCase("DATE PLUS 3")) {
                String quantity = actionCommon.getValueSection("DATE PLUS 3");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).equalsIgnoreCase("DATE PLUS 1")) {
                String quantity = actionCommon.getValueSection("DATE PLUS 1");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).equalsIgnoreCase("YEAR PLUS")) {
                String quantity = Serenity.sessionVariableCalled("YEAR PLUS");
                valueFields.set(i, quantity);
            }
//            if(valueFields.get(i).equals("stk")) {
//                // tài khoản lấy được ở 1.1
//                String quantity = actionCommon.getValueSection("stk");
//                valueFields.set(i, quantity);
//            }
            if (valueFields.get(i).equals("hdgh")) {
                Random rd = null;
                try {
                    rd = SecureRandom.getInstanceStrong();
                    int number1 = rd.nextInt(100000);
                    //101.mã khách hàng.TODAY.STT (VD:101.8146686.20200928.01)
                    String text = actionCommon.getValueSection("Id_INDIV");
                    String quantity = "101." + text + "." +
                            actionCommon.convertFormatDate(Serenity.sessionVariableCalled("date time today"), BaseStringUtils.FOMART_DATE_DD_MMM_YYYY, BaseStringUtils.FOMART_DATE_YYYYMMDD) + "." + number1;
                    valueFields.set(i, quantity);
                } catch (NoSuchAlgorithmException e) {

                }

            }
            if (valueFields.get(i).equalsIgnoreCase("matDate")) {
                String quantity = actionCommon.getValueSection("workingDay");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).equalsIgnoreCase("MONTH PLUS")) {
                String quantity = actionCommon.getValueSection("MONTH PLUS");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).equals("Project_SME")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Project_SME"));
            }
            if (valueFields.get(i).equals("Project_SME_A")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Project_SME_A"));
            }
            if (valueFields.get(i).equalsIgnoreCase("<SoDuKhaDung")) {
                String value = actionCommon.getValueSection("So du kha dung");
                int soDu = Integer.parseInt(value.replace(",", "")) - 1;
                valueFields.set(i, soDu + "");
            }
            if (valueFields.get(i).equalsIgnoreCase("SoDuKhaDung")) {
                String value = actionCommon.getValueSection("So du kha dung");
                valueFields.set(i, value);
            }
            if (valueFields.get(i).equals("accountNumber1")) {
                valueFields.set(i, Serenity.sessionVariableCalled("accountNumber1"));
            }
            if (valueFields.get(i).equals("accountNumber2")) {
                valueFields.set(i, Serenity.sessionVariableCalled("accountNumber2"));
            }
            if (valueFields.get(i).equals("$Random-Mnemonic")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomString(6));
            }
            if (valueFields.get(i).equals("$Random-Cus-Status")) {
                valueFields.set(i, String.valueOf(actionCommon.getNumInRange(1, 5)));
            }
            if (valueFields.get(i).equals("$Random-Sector-List")) {
                String[] arrSector = {"1700", "1703", "1704", "1705", "1706"};
                int index = actionCommon.getNumInRange(0, 4);
                valueFields.set(i, arrSector[index]);
            }
            if (valueFields.get(i).equals("$Random-10-Number")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(10));
            }
            if (valueFields.get(i).equalsIgnoreCase(">SoDuKhaDung")) {
                String value = actionCommon.getValueSection("So du kha dung");
                int soDu = Integer.parseInt(value.replace(",", "")) + 100000;
                valueFields.set(i, soDu + "");
            }

            if (valueFields.get(i).equalsIgnoreCase("matDate")) {
                String quantity = actionCommon.getValueSection("workingDay");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).equalsIgnoreCase("MONTH PLUS")) {
                String quantity = actionCommon.getValueSection("MONTH PLUS");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).equals("Project_SME")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Project_SME"));
            }
            if (valueFields.get(i).equals("Project_SME_A")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Project_SME_A"));
            }
            if (valueFields.get(i).equalsIgnoreCase("<SoDuKhaDung")) {
                String value = actionCommon.getValueSection("So du kha dung");
                int soDu = Integer.parseInt(value.replace(",", "")) - 1;
                valueFields.set(i, soDu + "");
            }
            if (valueFields.get(i).equalsIgnoreCase("SoDuKhaDung")) {
                String value = actionCommon.getValueSection("So du kha dung");
                valueFields.set(i, value);
            }
            if (valueFields.get(i).equals("accountNumber1")) {
                valueFields.set(i, Serenity.sessionVariableCalled("accountNumber1"));
            }
            if (valueFields.get(i).equals("accountNumber2")) {
                valueFields.set(i, Serenity.sessionVariableCalled("accountNumber2"));
            }
            if (valueFields.get(i).equals("$IID")) {
                valueFields.set(i, Serenity.sessionVariableCalled("@ID"));
            }
            if (valueFields.get(i).equals("SUB_PRODUCT")) {
                valueFields.set(i, Serenity.sessionVariableCalled("SUB_PRODUCT"));
            }
            if (valueFields.get(i).equals("$Random-Mnemonic")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomString(10));
            }
            if (valueFields.get(i).equals("$Random-Cus-Status")) {
                valueFields.set(i, String.valueOf(actionCommon.getNumInRange(1, 5)));
            }
            if (valueFields.get(i).equals("$Random-Sector-List")) {
                String[] arrSector = {"1700", "1703", "1704", "1705", "1706"};
                int index = actionCommon.getNumInRange(0, 4);
                valueFields.set(i, arrSector[index]);
            }
            if (valueFields.get(i).equals("$Random-10-Number")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(10));
            }
            if (valueFields.get(i).equals("$Random-10-Number")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(10));
            }
            if (valueFields.get(i).equalsIgnoreCase(">SoDuKhaDung")) {
                String value = actionCommon.getValueSection("So du kha dung");
                int soDu = Integer.parseInt(value.replace(",", "")) + 100000;
                valueFields.set(i, soDu + "");
            }

            if (valueFields.get(i).equals("Key=MB.HDGH")) {
                String value = actionCommon.getValueSection("So du kha dung");
                int soDu = Integer.parseInt(value.replace(",", "")) + 100000;
                valueFields.set(i, soDu + "");
            }

//            ---------------
            if (valueFields.get(i).startsWith("$serenityKey =")) {
                String sessionKey = valueFields.get(i).substring(valueFields.get(i).indexOf("=") + 1).trim();
                valueFields.set(i, Serenity.sessionVariableCalled(sessionKey));
            }
            if (valueFields.get(i).contains("$WeekDate")) {
                valueFields.set(i, Serenity.sessionVariableCalled("YEAR PLUS").toString() + "WEEK1");
            }
            if (valueFields.get(i).contains("$AccountOffice")) {
                String coCode = actionCommon.getValueSection("CoCode");
                valueFields.set(i, coCode);
            }
            if (valueFields.get(i).contains("$ChargeCode")) {
                String chargeCode = actionCommon.getValueSection("Charge_code");
                valueFields.set(i, chargeCode);
            }

            if (valueFields.get(i).equalsIgnoreCase("TaiKhoan1")) {
                String quantity = actionCommon.getValueSection("TaiKhoan1");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).equalsIgnoreCase("TaiKhoan2")) {
                String quantity = actionCommon.getValueSection("TaiKhoan2");
                valueFields.set(i, quantity);
            }
//            -----TramNBB------
            if (valueFields.get(i).equals("stk")) {
                // tài khoản lấy được ở 1.1
                String quantity = actionCommon.getValueSection("stk");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).equalsIgnoreCase("<SoDuKhaDung1")) {
                String value = actionCommon.getValueSection("So du kha dung");
                int soDu = Integer.parseInt(value.replace(",", "")) - 50000;
                valueFields.set(i, soDu + "");
            }
            if (valueFields.get(i).equalsIgnoreCase("YEAR PLUS 1")) {
                String quantity = Serenity.sessionVariableCalled("YEAR PLUS 1");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).equalsIgnoreCase("YEAR PLUS 2")) {
                String quantity = Serenity.sessionVariableCalled("YEAR PLUS 2");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).equalsIgnoreCase("DATE PLUS -1")) {
                String quantity = actionCommon.getValueSection("DATE PLUS -1");
                valueFields.set(i, quantity);
            }
            //---------------
            if (valueFields.get(i).equalsIgnoreCase("matDate")) {
                String quantity = actionCommon.getValueSection("workingDay");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).equalsIgnoreCase("MONTH PLUS")) {
                String quantity = actionCommon.getValueSection("MONTH PLUS");
                valueFields.set(i, quantity);
            }
            if (valueFields.get(i).equals("Project_SME")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Project_SME"));
            }
            if (valueFields.get(i).equals("Project_SME_A")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Project_SME_A"));
            }
            if (valueFields.get(i).equalsIgnoreCase("<SoDuKhaDung")) {
                String value = actionCommon.getValueSection("So du kha dung");
                int soDu = Integer.parseInt(value.replace(",", "")) - 1;
                valueFields.set(i, soDu + "");
            }
            if (valueFields.get(i).equalsIgnoreCase("SoDuKhaDung")) {
                String value = actionCommon.getValueSection("So du kha dung");
                valueFields.set(i, value);
            }
            if (valueFields.get(i).equals("accountNumber1")) {
                valueFields.set(i, Serenity.sessionVariableCalled("accountNumber1"));
            }
            if (valueFields.get(i).equals("accountNumber2")) {
                valueFields.set(i, Serenity.sessionVariableCalled("accountNumber2"));
            }
            if (valueFields.get(i).equals("$Random-Mnemonic")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomString(10));
            }
            if (valueFields.get(i).equals("$Random-Cus-Status")) {
                valueFields.set(i, String.valueOf(actionCommon.getNumInRange(1, 5)));
            }
            if (valueFields.get(i).equals("$Random-Sector-List")) {
                String[] arrSector = {"1700", "1703", "1704", "1705", "1706"};
                int index = actionCommon.getNumInRange(0, 4);
                valueFields.set(i, arrSector[index]);
            }
            if (valueFields.get(i).equals("$Random-10-Number")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(10));
            }
            if (valueFields.get(i).equalsIgnoreCase(">SoDuKhaDung")) {
                String value = actionCommon.getValueSection("So du kha dung");
                int soDu = Integer.parseInt(value.replace(",", "")) + 100000;
                valueFields.set(i, soDu + "");
            }
            if (valueFields.get(i).startsWith("$serenityKey =")) {
                String sessionKey = valueFields.get(i).substring(valueFields.get(i).indexOf("=") + 1).trim();
                valueFields.set(i, Serenity.sessionVariableCalled(sessionKey));
            }
            if (valueFields.get(i).equals("$CUSTOMER1")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Customer"));
            }
            if (valueFields.get(i).equals("$CURRENT_DATE")) {
                valueFields.set(i, Serenity.sessionVariableCalled("DATE PLUS 0"));
            }
            if (valueFields.get(i).equals("$CURRENT_DATE_PLUS_2")) {
                String dateTime_2y = Serenity.sessionVariableCalled("DATE PLUS 730");
                valueFields.set(i, dateTime_2y);
            }
            if (valueFields.get(i).equals("$LEGACY")) {
                valueFields.set(i, Serenity.sessionVariableCalled("contractCode"));
            }
            if (valueFields.get(i).equals("$ACCOUNT2")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Code"));
            }
            if (valueFields.get(i).equals("$ACCOUNT")) {
                valueFields.set(i, Serenity.sessionVariableCalled("ACCOUNT"));
            }

            if (valueFields.get(i).contains("replace_")) {
                String text = valueFields.get(i);
                do {
                    // Retrieve value which is replaced the pattern with format "%text%replace_session-variable-name_%text%"
                    String textToBeReplaced = text.split("_")[1];
                    text = text.replace("replace_" + textToBeReplaced + "_", Serenity.sessionVariableCalled(textToBeReplaced));
                } while (text.contains("replace_"));
                valueFields.set(i, text);
            }

        }
        inputData();
    }

    @And("Nhập thông tin vào form")
    public void nhapThongTinVaoForm() throws ParseException {

        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }
            if (valueFields.get(i).equals("frequency")) {
                valueFields.set(i, Serenity.sessionVariableCalled("systemTime") + " e0Y e0M e0W eBD e0F");
            }
            if (valueFields.get(i).contains("PL+")) {
                valueFields.set(i, "PL" + Serenity.sessionVariableCalled("PL"));
            }

            if (valueFields.get(i).equals("acc1")) {
                valueFields.set(i, Serenity.sessionVariableCalled("acc1"));
            }

            if (valueFields.get(i).equals("acc2")) {
                valueFields.set(i, Serenity.sessionVariableCalled("acc2"));
            }
            if (valueFields.get(i).equalsIgnoreCase("account1")) {
                valueFields.set(i, Serenity.sessionVariableCalled("customerAccount"));
            }
            if (valueFields.get(i).equalsIgnoreCase("account2")) {
                valueFields.set(i, Serenity.sessionVariableCalled("customerAccount2"));
            }
            if (valueFields.get(i).equalsIgnoreCase("customer1")) {
                valueFields.set(i, Serenity.sessionVariableCalled("customerNumber1"));
            }
            if (valueFields.get(i).equalsIgnoreCase("customer2")) {
                valueFields.set(i, Serenity.sessionVariableCalled("customerNumber2"));
            }
            if (valueFields.get(i).equalsIgnoreCase("$Customer")) {
                valueFields.set(i, Serenity.sessionVariableCalled("customer"));
            }
            if (valueFields.get(i).equalsIgnoreCase("currency1")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Currency"));
            }

            if (valueFields.get(i).equalsIgnoreCase("limit_amt")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Id_SME") + ".123456789.11");
            }
            if (valueFields.get(i).equalsIgnoreCase("SerriesNo")) {
                valueFields.set(i, Serenity.sessionVariableCalled("SERIES_NO"));

            }
            if (valueFields.get(i).contains("special character")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomSpecialCharacter(8));
            }
            if (valueFields.get(i).equalsIgnoreCase("fromDate")) {
                valueFields.set(i, Serenity.sessionVariableCalled("fromDate"));
            }
            if (valueFields.get(i).equalsIgnoreCase(">Quantity")) {
                int quantity = Integer.parseInt(Serenity.sessionVariableCalled(" Quantity"));
                valueFields.set(i, String.valueOf(quantity + 1000));
            }
            if (valueFields.get(i).equalsIgnoreCase("<Quantity")) {
                int quantity = Integer.parseInt(Serenity.sessionVariableCalled(" Quantity"));
                valueFields.set(i, String.valueOf(actionCommon.getNumInRange(1, quantity - 1)));
            }
            if (valueFields.get(i).equalsIgnoreCase("pastTime")) {
                valueFields.set(i, Serenity.sessionVariableCalled("pastTime"));
            }
//             Lấy số random với độ dài truyền vào là bất kì
            if (valueFields.get(i).contains("RandomNumberWith")) {
                int lenght = Integer.parseInt(valueFields.get(i).replace("RandomNumberWith", ""));
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(lenght));
                actionCommon.setValueSection("RandomNumberAfterGen", valueFields.get(i));
            }
//             Lấy chuỗi random, là các kí tự chữ và số với độ dài truyền vào là bất kì
            if (valueFields.get(i).contains("RandomNumberTextWith")) {
                int lenght = Integer.parseInt(valueFields.get(i).replace("RandomNumberTextWith", ""));
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomString(lenght - 2) + CustomerMdtIndiv3Definitions.generateRandomNumber(2));
            }
//            Lấy chuỗi random, chỉ bao gồm các kí tự chữ với độ dài truyền vào là bất kì
            if (valueFields.get(i).contains("RandomStringWith")) {
                int lenght = Integer.parseInt(valueFields.get(i).replace("RandomStringWith", ""));
                String cell = CustomerMdtIndiv3Definitions.generateRandomCharacter(lenght);
                valueFields.set(i, cell);
                actionCommon.setValueSection("format_Term", cell);
            }

            if (valueFields.get(i).contains("Ma_limit")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Ma Limit"));
            }

            if (valueFields.get(i).equalsIgnoreCase("limitReference")) {
                valueFields.set(i, Serenity.sessionVariableCalled("limitReference"));
            }
            if (valueFields.get(i).equalsIgnoreCase("applicantId")) {
                valueFields.set(i, Serenity.sessionVariableCalled("applicantId"));
            }
            if (valueFields.get(i).equalsIgnoreCase("nganhNgheCha")) {
                valueFields.set(i, Serenity.sessionVariableCalled("nganhNgheCha"));
            }
            if (valueFields.get(i).equalsIgnoreCase("<EndWithD")) {
                String cell = actionCommon.getNumInRange(0, 998) + "D";
                valueFields.set(i, cell);
            }

            if (valueFields.get(i).equalsIgnoreCase("<EndWithM")) {
                String cell = actionCommon.getNumInRange(0, 99) + "M";
                valueFields.set(i, cell);
                actionCommon.setValueSection("format_Term", cell);
            }


            if (valueFields.get(i).equalsIgnoreCase("Customer No")) {
                valueFields.set(i, Serenity.sessionVariableCalled("customerNo"));
            }
            if (valueFields.get(i).contains("RandomAcc")) {
                valueFields.set(i, Serenity.sessionVariableCalled("RandomAcc"));
            }

            if (valueFields.get(i).equalsIgnoreCase("Term")) {
                String term = "000" + actionCommon.getValueSection("format_Term");
                if (term.length() > 5) {
                    term = term.replace("000", "00");
                }
                valueFields.set(i, term);
            }

            if (valueFields.get(i).equalsIgnoreCase("Greater Charge Amount")) {
                valueFields.set(i, String.valueOf(Long.parseLong(actionCommon.getValueSection("sumChargeAmount")) + 10));
            }
            if (valueFields.get(i).equalsIgnoreCase("Account")) {
                valueFields.set(i, actionCommon.getValueSection("Account"));
            }
            if (valueFields.get(i).equalsIgnoreCase("<Working balance")) {
                int workingBalance = 0;
                if (Serenity.sessionVariableCalled("Working balance").toString().contains(".")) {
                    workingBalance = Integer.parseInt(Serenity.sessionVariableCalled("Working balance").toString().replaceAll(",", "").split(".")[0]);
                } else {
                    workingBalance = Integer.parseInt(Serenity.sessionVariableCalled("Working balance").toString().replaceAll(",", ""));
                }
                valueFields.set(i, String.valueOf(actionCommon.getNumInRange(0, workingBalance - 1)));
            }
            if (valueFields.get(i).equalsIgnoreCase("$CCY")) {
                valueFields.set(i, actionCommon.getValueSection("CCY"));
            }

            if (valueFields.get(i).equalsIgnoreCase("$projectId")) {
                valueFields.set(i, actionCommon.getValueSection("Id"));
            }
            if (valueFields.get(i).equalsIgnoreCase("debit-account")) {
                valueFields.set(i, actionCommon.getValueSection("debit"));
            }
            if (valueFields.get(i).equalsIgnoreCase("credit-account")) {
                valueFields.set(i, actionCommon.getValueSection("credit"));
            }
            if (valueFields.get(i).equals("Fill Greater Today")) {
                valueFields.set(i, Serenity.sessionVariableCalled("DATE PLUS 1"));
            }

            if (valueFields.get(i).equalsIgnoreCase("id1_mbketchuyen")) {
                valueFields.set(i, Serenity.sessionVariableCalled("ID1"));
            }

            if (valueFields.get(i).equalsIgnoreCase("id2_mbketchuyen")) {
                valueFields.set(i, Serenity.sessionVariableCalled("ID2"));
            }
            if (valueFields.get(i).equalsIgnoreCase("id_ketchuyen_norecord")) {
                valueFields.set(i, Serenity.sessionVariableCalled("id_ketchuyen_norecord"));
            }
            if (valueFields.get(i).equalsIgnoreCase("id1_filter")) {
                valueFields.set(i, Serenity.sessionVariableCalled("ID1 not duplicate"));
            }
            if (valueFields.get(i).equalsIgnoreCase("Category")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Category"));
            }
            if (valueFields.get(i).equalsIgnoreCase("number less than 15")) {
                List<Integer> integerList = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
                try {
                    valueFields.set(i, CustomerMdtIndiv3Definitions.generateNumber(integerList));
                } catch (NoSuchAlgorithmException e) {
                }
            }

            if (valueFields.get(i).equals("Value Drop")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Value Drop"));
            }
            if (valueFields.get(i).equals("selectedValue")) {
                valueFields.set(i, Serenity.sessionVariableCalled("selectedValue"));
            }
            if (valueFields.get(i).equals("AArandomNum")) {
                valueFields.set(i, Serenity.sessionVariableCalled("AArandomNum"));
            }
            if (valueFields.get(i).equals("Customer")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Customer"));
            }
            if (valueFields.get(i).equals("Id")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Id"));
            }
            if (valueFields.get(i).contains("firstValue")) {
                valueFields.set(i, Serenity.sessionVariableCalled("firstValue"));
            }

            if (valueFields.get(i).equals("swiftInId")) {
                valueFields.set(i, Serenity.sessionVariableCalled("swiftInId"));
            }
            if (valueFields.get(i).equals("accCompany2")) {
                valueFields.set(i, Serenity.sessionVariableCalled("accCompany2"));
            }
            if (valueFields.get(i).equals("accCompany")) {
                valueFields.set(i, Serenity.sessionVariableCalled("accCompany"));
            }
            if (valueFields.get(i).equals("out-col-2")) {
                valueFields.set(i, Serenity.sessionVariableCalled("OutCol2"));
            }
            if (valueFields.get(i).equals("$company")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Company"));
            }
            if (valueFields.get(i).equalsIgnoreCase("$accountDebit")) {
                valueFields.set(i, actionCommon.getValueSection("Account number"));
            }
            if (valueFields.get(i).equalsIgnoreCase("#SoDuKhaDung")) {
                String value = actionCommon.getValueSection("So du kha dung");
                Long soDu = Long.parseLong(value.replace(",", ""));
                valueFields.set(i, String.valueOf(soDu + 10));
            }
            if (valueFields.get(i).equalsIgnoreCase("SoDuKhaDung")) {
                String value = actionCommon.getValueSection("So du kha dung");
                Long soDu = Long.parseLong(value.replace(",", ""));
                valueFields.set(i, String.valueOf(soDu));
            }
            if (valueFields.get(i).equalsIgnoreCase("<SoDuKhaDung")) {
                String value = actionCommon.getValueSection("So du kha dung");
                Long soDu = Long.parseLong(value.replace(",", "")) - 1;
                valueFields.set(i, String.valueOf(soDu));
            }
            if (valueFields.get(i).equalsIgnoreCase("$transactionId")) {
                valueFields.set(i, actionCommon.getValueSection("transactionId"));
            }
            if (valueFields.get(i).equals("customer-id")) {
                valueFields.set(i, Serenity.sessionVariableCalled("customerId"));
            }

            if (valueFields.get(i).equalsIgnoreCase("$MD_CODE")) {
                valueFields.set(i, actionCommon.getValueSection("data1"));
            }
            if (valueFields.get(i).equalsIgnoreCase("TotalAmtToRepay")) {
                valueFields.set(i, actionCommon.getValueSection("Total Amt To Repay"));
            }
            if (valueFields.get(i).equalsIgnoreCase("soFax")) {
                valueFields.set(i, "0" + CustomerMdtIndiv3Definitions.generateRandomNumber(9));
            }
            if (valueFields.get(i).equals("<LoanAmount")) {
                String value = actionCommon.getValueSection("Loan Amount.1");
                long loanAmount = Long.parseLong(value.replace(",", "")) - 1;
                valueFields.set(i, loanAmount + "");
            }
            if (valueFields.get(i).equals("<outCol2")) {
                String value = actionCommon.getValueSection("outCol2");
                long loanAmount = Long.parseLong(value.replace(",", "")) - 1;
                valueFields.set(i, loanAmount + "");
            }
            if (valueFields.get(i).equalsIgnoreCase("DATE PLUS 90 DAILY")) {
                valueFields.set(i, actionCommon.getValueSection("DATE PLUS 90") + "DAILY");
            }
            if (valueFields.get(i).equals("AbsoluteLoanAmount+1")) {
                String value = actionCommon.getValueSection("Loan Amount.1");
                long loanAmount = Long.parseLong(value.replace(",", "")) * -1 + 1;
                valueFields.set(i, loanAmount + "");
            }
            /**
             * Call session_AnhDTN6
             */
            if (valueFields.get(i).contains("session-")) {
                valueFields.set(i, actionCommon.getValueSection(valueFields.get(i).split("-", 2)[1]));
            }


            /**
             * Call session_AnhDTN6
             */

            if (valueFields.get(i).equals("accountNumber1")) {
                valueFields.set(i, Serenity.sessionVariableCalled("accountNumber1"));
            }
            if (valueFields.get(i).equals("accountNumber2")) {
                valueFields.set(i, Serenity.sessionVariableCalled("accountNumber2"));
            }
            if (valueFields.get(i).equals("$Account1")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Account1"));

            }

            if (valueFields.get(i).equals("accNo")) {
                valueFields.set(i, Serenity.sessionVariableCalled("accNo"));
            }
            if (valueFields.get(i).equals("PROCESS.ID")) {
                valueFields.set(i, Serenity.sessionVariableCalled("PROCESS.ID"));
            }
            if (valueFields.get(i).equals("Amount.1")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Amount.1"));
            }

            //Thuynt107
            if (valueFields.get(i).equals("randomValueIndustry")) {
                valueFields.set(i, Serenity.sessionVariableCalled("randomValueIndustry"));
            }
            if (valueFields.get(i).equals("Customer id")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Customer id"));
            }
            if (valueFields.get(i).equals("Lta Category.1")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Lta Category.1"));
            }
            if (valueFields.get(i).equals("randomValue")) {
                valueFields.set(i, Serenity.sessionVariableCalled("randomValue"));
            }
            if (valueFields.get(i).equals("idRecord")) {
                valueFields.set(i, Serenity.sessionVariableCalled("idRecord"));
            }
            if (valueFields.get(i).equals("Filter Account")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Filter Account"));
            }
            if (valueFields.get(i).equalsIgnoreCase("$CUSTOMER1")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Customer"));
            }
            if (valueFields.get(i).equalsIgnoreCase("$CURRENT_DATE")) {
                valueFields.set(i, Serenity.sessionVariableCalled("DATE PLUS 0"));
            }
            if (valueFields.get(i).equalsIgnoreCase("$CURRENT_DATE_PLUS_2")) {
                String dateTime_2y = Serenity.sessionVariableCalled("DATE PLUS 730");
                valueFields.set(i, dateTime_2y);
            }
            if (valueFields.get(i).equalsIgnoreCase("$LEGACY")) {
                valueFields.set(i, Serenity.sessionVariableCalled("contractCode"));
            }
            if (valueFields.get(i).equalsIgnoreCase("$ACCOUNT2")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Code"));
            }
            if (valueFields.get(i).equalsIgnoreCase("$ACCOUNT")) {
                valueFields.set(i, Serenity.sessionVariableCalled("ACCOUNT"));
            }
            if (valueFields.get(i).equals("interestKey2 + 1")) {
                String interestKey2new = (Integer.parseInt(actionCommon.getValueSection("interestKey2")) + 1) + "";
                valueFields.set(i, interestKey2new);
            }
            if (valueFields.get(i).contains("Random Text Number")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomString(5)
                        + CustomerMdtIndiv3Definitions.generateRandomNumber(3));
            }
            if (valueFields.get(i).startsWith("RandomNumberFrom")) {
                String tempValue = valueFields.get(i);
                int innerBound = Integer.parseInt(tempValue.substring(16, tempValue.indexOf("To")));
                int upperBound = Integer.parseInt(tempValue.substring(tempValue.indexOf("To") + 2));
                valueFields.set(i, String.valueOf(actionCommon.getNumInRange(innerBound, upperBound)));
            }
            if (valueFields.get(i).contains("RandomMoneyNumber")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(9));
            }
            if (valueFields.get(i).equals("m21_customer")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Customer"));
            }
            if (valueFields.get(i).equals("mnemonic_customer")) {
                valueFields.set(i, "A" + Serenity.sessionVariableCalled("Customer.id"));
            }
            if (valueFields.get(i).equals("GbName_customer")) {
                valueFields.set(i, "CUSTOMER." + Serenity.sessionVariableCalled("Customer.id"));
            }
            if (valueFields.get(i).equals("GbStreet_customer")) {
                valueFields.set(i, "ADDRESS." + Serenity.sessionVariableCalled("Customer.id"));
            }
            if (valueFields.get(i).equals("AMOUNT-positve")) {
                String value = actionCommon.getValueSection("AMOUNT");
                value = value.contains("-") ? value.replace("-","") : "-" + value;
                valueFields.set(i, value);
            }
        }

        inputData();
    }

    @And("Nhập Tài Khoản thu phí")
    public void nhapTaiKhoanThuPhi() {

        actionCommon.waitVisible(New_Deal);
        actionCommon.clickElement(New_Deal);
        Serenity.setSessionVariable("ID charge with delivery").to(actionCommon.getAttributeElement(FundsTransferComponent.FT_TEXT_XPATH, "value"));
        Serenity.recordReportData().withTitle("ID charge with delivery").andContents(Serenity.sessionVariableCalled("ID charge with delivery"));

        String customerNumber = Serenity.sessionVariableCalled("customerNumber").toString();

        inputData();
        actionCommon.typeText(DEBIT_FIELD, customerNumber + Keys.TAB);
        actionCommon.typeText(ACC_VIP_FIELD, customerNumber + Keys.TAB);
    }

    @And("Nhập trường sdt.sms vào bản ghi đã tạo thành công")
    public void nhapTruongSdtSmsVaoBanGhiDaTaoThanhCong() {
        inputData();
    }


    @And("Nhập Account")
    public void nhapAccount() {
        //Display ID Account
        Serenity.setSessionVariable("ID Account").to(actionCommon.getAttributeElement(FundsTransferComponent.FT_TEXT_XPATH, "value"));
        Serenity.recordReportData().withTitle("Mã Account").andContents(Serenity.sessionVariableCalled("ID Account"));

        inputData();
    }

    @And("Tìm kiếm customner number với số dư khả dụng không đủ")
    public void retrieveNotEnoughAmountAccount() throws Exception {
        List<Map<String, String>> filterOptions = new ArrayList<>();

        Map source = new HashMap();
        source.put("columnName", "Product.code");
        source.put("operator", "EQUAL");
        source.put("valueToFilter", "1");
        filterOptions.add(source);

        Map source1 = new HashMap();
        source1.put("columnName", "So du kha dung");
        source1.put("operator", "SMALLER");
        source1.put("valueToFilter", "999999999999");
        filterOptions.add(source1);

        List<Map<String, String>> accounts = actionCommon.filterDataTable(filterOptions);

        Map<String, String> account = null;
        for (Map<String, String> acc : accounts) {
            String workBal = acc.get("Working.bal").trim().replace(",", "");
            String soDuKhaDung = acc.get("So du kha dung").trim().replace(",", "");

            Double workBalAsDouble = workBal.equals("") ? 0 : Double.parseDouble(workBal);
            Double soDuKhaDungAsDouble = soDuKhaDung.equals("") ? 0 : Double.parseDouble(acc.get("So du kha dung"));

            if (workBalAsDouble > soDuKhaDungAsDouble) {
                account = acc;
                break;
            }
        }

        if (null == account) {
            throw new AssumptionViolatedException(
                    "This scenario does not include any 'Tài Khoản có số dư không đủ' as a precondition."
                            + " Therefore, it will be skipped!!!");
        }

        Serenity.setSessionVariable("customerNumber").to(account.get("Account.number"));
        Serenity.recordReportData().withTitle("customerNumber").andContents(Serenity.sessionVariableCalled("Account.number"));
    }

    @And("Tìm kiếm customner number hợp lệ")
    public void retrieveEnoughAmountAccount() throws Exception {
        List<Map<String, String>> filterOptions = new ArrayList<>();

        Map source = new HashMap();
        source.put("columnName", "Product.code");
        source.put("operator", "EQUAL");
        source.put("valueToFilter", "1");

        filterOptions.add(source);

        Map source1 = new HashMap();
        source1.put("columnName", "Working.bal");
        source1.put("operator", "GREATER");
        source1.put("valueToFilter", "1000000");

        filterOptions.add(source1);

        Map<String, String> account = actionCommon.filterDataTableAndGetFirstItem(filterOptions);

        if (null == account) {
            throw new AssumptionViolatedException(
                    "This scenario does not include any 'Customer Number hợp lệ' as a precondition."
                            + " Therefore, it will be skipped!!!");
        }

        Serenity.setSessionVariable("customerNumber").to(account.get("Account.number"));
        Serenity.recordReportData().withTitle("customerNumber").andContents(Serenity.sessionVariableCalled("customerNumber"));
        Serenity.setSessionVariable("customerId").to(account.get("Customer.id"));
        Serenity.recordReportData().withTitle("customerId").andContents(Serenity.sessionVariableCalled("customerId"));
    }

    @And("Tìm kiếm customner number đủ điều kiện thanh toán")
    public void retrieveValidAccount() throws Exception {
        List<Map<String, String>> filterOptions = new ArrayList<>();

        Map<String, String> source = new HashMap<>();
        source.put("columnName", "Avail balance");
        source.put("operator", "GREATER");
        source.put("valueToFilter", "55000");
        filterOptions.add(source);

        Map<String, String> source2 = new HashMap<>();
        source2.put("columnName", "Currency");
        source2.put("operator", "EQUAL");
        source2.put("valueToFilter", "VND");
        filterOptions.add(source2);

        List<Map<String, String>> listAlls = actionCommon.filterDataTable(filterOptions);
        System.out.println("TF " + listAlls.size());

        if (0 == listAlls.size()) {
            throw new AssumptionViolatedException(
                    "This scenario does not include any 'Tài Khoản đủ điều kiện thanh toán' as a precondition."
                            + " Therefore, it will be skipped!!!");
        }

        List<String> listAccounts = new ArrayList<>();
        List<String> listCustomers = new ArrayList<>();
        for (Map<String, String> item : listAlls) {
            listAccounts.add(item.get("Account"));
            listCustomers.add(item.get("Customer"));
        }
        actionCommon.setValueSection("listOfAccountNumbers", String.join(",", listAccounts));
        actionCommon.setValueSection("listOfCustomers", String.join(",", listCustomers));

        Serenity.setSessionVariable("customerNumber").to(listAccounts.get(0));
        Serenity.recordReportData().withTitle("Customer Number").andContents(Serenity.sessionVariableCalled("customerNumber"));
        Serenity.setSessionVariable("customerId").to(listAlls.get(0).get("Customer"));
        Serenity.recordReportData().withTitle("Customer Id").andContents(Serenity.sessionVariableCalled("customerId"));
        Serenity.setSessionVariable("currency").to(listAlls.get(0).get("Currency"));
        Serenity.recordReportData().withTitle("Currency").andContents(Serenity.sessionVariableCalled("currency"));
    }

    @And("Tìm kiếm account và customer với số dư > 55000 và UNAUTH.KEY = null và EXITS.TRANS.FWD = null trong bảng ENQ.CBS.LIETKE.ACCOUNT")
    public void findAccountandCustomer() throws Exception {
        List<Map<String, String>> filterOptions = new ArrayList<>();

        Map<String, String> option = new HashMap<>();
        option.put("columnName", "UNAUTH.KEY");
        option.put("operator", "EQUAL");
        option.put("valueToFilter", "");
        filterOptions.add(option);

        Map<String, String> option1 = new HashMap<>();
        option1.put("columnName", "EXITS.TRANS.FWD");
        option1.put("operator", "EQUAL");
        option1.put("valueToFilter", "");
        filterOptions.add(option1);

        Map<String, String> option2 = new HashMap<>();
        option2.put("columnName", "Avail balance");
        option2.put("operator", "GREATER");
        option2.put("valueToFilter", "55000");

        Map<String, String> account = actionCommon.filterDataTableAndGetFirstItem(filterOptions);

        if (null == account) {
            throw new AssumptionViolatedException(
                    "This scenario does not include any 'Tài Khoản đủ điều kiện thanh toán' as a precondition."
                            + " Therefore, it will be skipped!!!");
        }

        Serenity.setSessionVariable("sTKNumber").to(account.get("Account"));
        Serenity.recordReportData().withTitle("Customer Number").andContents(Serenity.sessionVariableCalled("sTKNumber"));
        Serenity.setSessionVariable("customerId").to(account.get("Customer"));
        Serenity.recordReportData().withTitle("Customer Id").andContents(Serenity.sessionVariableCalled("customerId"));
        String ac = Serenity.sessionVariableCalled("customerNumber");
    }


    @And("Tìm kiếm customner number bị block")
    public void retrieveBlockedAccount() throws Exception {
        List<Map<String, String>> filterOptions = new ArrayList<>();

        Map source = new HashMap();
        source.put("columnName", "Product.code");
        source.put("operator", "EQUAL");
        source.put("valueToFilter", "1");
        filterOptions.add(source);

        Map source1 = new HashMap();
        source1.put("columnName", "So du kha dung");
        source1.put("operator", "SMALLER");
        source1.put("valueToFilter", "999999999999");
        filterOptions.add(source1);

        List<Map<String, String>> accounts = actionCommon.filterDataTableThenGetAllFromBack(filterOptions, 3);

        Map<String, String> account = null;
        for (Map<String, String> acc : accounts) {
//            Double workBalAsDouble = acc.get("Working.bal").equals("") ? 0 : Double.parseDouble(acc.get("Working.bal"));
//            Double soDuKhDungAsDouble = acc.get("So du kha dung").equals("") ? 0 : Double.parseDouble(acc.get("So du kha dung"));

            if (acc.get("Working.bal").equals(acc.get("So du kha dung"))) {
                account = acc;
                break;
            }
//            if (workBalAsDouble == soDuKhDungAsDouble) {
//                account = acc;
//                break;
//            }
        }

        if (null == account) {
            throw new AssumptionViolatedException(
                    "This scenario does not include any 'Tài Khoản bị block' as a precondition."
                            + " Therefore, it will be skipped!!!");
        }

        Serenity.setSessionVariable("customerNumber").to(account.get("Account.number"));
        Serenity.recordReportData().withTitle("customerNumber").andContents(Serenity.sessionVariableCalled("Account.number"));
    }

    //FPT
    @And("Nhập thông tin vào trong form")
    public void nhapThongTinVaoTrongForm() {
        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }
            //Trong phần TK đặc quyền
            //Customer
            if (valueFields.get(i).equals("customerNo")) {
                valueFields.set(i, Serenity.sessionVariableCalled("customerNo"));
            }
            //Account number để input vào 3 phần Debit, Prin, Intt account
            if (valueFields.get(i).equals("accNumber")) {
                valueFields.set(i, Serenity.sessionVariableCalled("accNumber"));
            }
            //Maturity Date(date lớn hơn date hiện tại 1 ngày)
            if (valueFields.get(i).equals("NextDay")) {
                valueFields.set(i, Serenity.sessionVariableCalled("DATE PLUS 1"));
            }
            //Maturity Date(date lớn hơn date hiện tại 5 ngày)
            if (valueFields.get(i).equals("Plus5Days")) {
                valueFields.set(i, Serenity.sessionVariableCalled("DATE PLUS 5"));
            }
            //Lấy ngày tiếp theo không phải là ngày nghỉ
            if (valueFields.get(i).equals("WorkingDay")) {
                valueFields.set(i, Serenity.sessionVariableCalled("workingDay"));
            }
            //Account để input vào 3 phần Debit, Prin, Intt account
            if (valueFields.get(i).equals("account")) {
                valueFields.set(i, Serenity.sessionVariableCalled("loaiTK"));
            }
            //division ID dùng cho MB.LD.TYPE
            if (valueFields.get(i).equals("division")) {
                valueFields.set(i, Serenity.sessionVariableCalled("division"));
            }
            //Account tìm từ VND để điền vào 3 phần Debit, Prin, Intt account
            if (valueFields.get(i).equals("VNDaccount")) {
                valueFields.set(i, Serenity.sessionVariableCalled("account"));
            }
            //dùng cho phần PRODUCTGR.CODE
            if (valueFields.get(i).equals("productCode")) {
                valueFields.set(i, Serenity.sessionVariableCalled("pCode"));
            }
            if (valueFields.get(i).contains("Random Text Number")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomString(5)
                        + CustomerMdtIndiv3Definitions.generateRandomNumber(3));
            }
            if (valueFields.get(i).contains("Random Text")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomString(7));
            }
            if (valueFields.get(i).equals("GroupIDValid")) {
                valueFields.set(i, Serenity.sessionVariableCalled("GroupIDValid"));
            }
            if (valueFields.get(i).equals("GroupIDInValid")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomString(3));
            }
            //use for mb.sto.group
            if (valueFields.get(i).equals("acc2")) {
                valueFields.set(i, Serenity.sessionVariableCalled("acc2"));
            }
            if (valueFields.get(i).equals("acc3")) {
                valueFields.set(i, Serenity.sessionVariableCalled("acc3"));
            }
            if (valueFields.get(i).equals("table1")) {
                valueFields.set(i, Serenity.sessionVariableCalled("table1"));
            }
            //use for eb.offering.circular
            if (valueFields.get(i).equals("customerId")) {
                valueFields.set(i, Serenity.sessionVariableCalled("customerId"));
            }
            if (valueFields.get(i).contains("Random TPCount")) {
                String count = CustomerMdtIndiv3Definitions.generateRandomNumber(2);
                if (count.equals("00")) {
                    int a = Integer.parseInt(count) + 1;
                    count = String.valueOf(a);
                }
                valueFields.set(i, count);
                Serenity.setSessionVariable("randomTPCount").to(count);
            }
            if (valueFields.get(i).contains("Random Price")) {
                String price = CustomerMdtIndiv3Definitions.getRandomNumber(1, 10);
                ;
                valueFields.set(i, price);
                Serenity.setSessionVariable("randomTPPrice").to(price);
            }
            if (valueFields.get(i).equals("Sum PD")) {
                String count = Serenity.sessionVariableCalled("randomTPCount");
                String price = Serenity.sessionVariableCalled("randomTPPrice");
                int sum = Integer.parseInt(count) * Integer.parseInt(price);
                valueFields.set(i, String.valueOf(sum));
//                Serenity.setSessionVariable("randomTPPrice").to(price);
            }
            if (valueFields.get(i).equals("Sum PD2")) {
                String count = Serenity.sessionVariableCalled("randomTPCount");
                String price = Serenity.sessionVariableCalled("randomTPPrice");
                int sum = Integer.parseInt(count) * Integer.parseInt(price) + 10;
                valueFields.set(i, String.valueOf(sum));
//                Serenity.setSessionVariable("randomTPPrice").to(price);
            }
            if (valueFields.get(i).contains("Random Num")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(3));
            }
            if (valueFields.get(i).equals("4 Random Num")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(4));
            }
            if (valueFields.get(i).contains("Random Email")) {
                valueFields.set(i, Serenity.sessionVariableCalled("randomTextAndEmail"));
            }
            //use in ic_charge
            if (valueFields.get(i).contains("Keyword And Session Date")) {
                valueFields.set(i, Serenity.sessionVariableCalled("keywordAndSessionDate"));
            }
            if (valueFields.get(i).contains("EmployeeId")) {
                valueFields.set(i, Serenity.sessionVariableCalled("IdEmployee"));
            }
            //use in mb_viettel_dc
            if (valueFields.get(i).equals("Viettel Branch")) {
                valueFields.set(i, Serenity.sessionVariableCalled("CUSTOMERID"));
            }
            if (valueFields.get(i).equals("Charg Pl")) {
                valueFields.set(i, Serenity.sessionVariableCalled("idMessage"));
            }
            if (valueFields.get(i).equals("Viettel Details")) {
                String description = CustomerMdtIndiv3Definitions.generateRandomString(5);
                valueFields.set(i, description);
                Serenity.setSessionVariable("viettelDetailDescription").to(description);
            }
            //use in cbs_rt_auto_table
            if (valueFields.get(i).equals("ID.CUSTOMER")) {
                valueFields.set(i, Serenity.sessionVariableCalled("ID2"));
            }
            if (valueFields.get(i).equals("ID.CUSTOMER2")) {
                valueFields.set(i, Serenity.sessionVariableCalled("ID3"));
            }
            if (valueFields.get(i).equals("randomNum")) {
                valueFields.set(i, Serenity.sessionVariableCalled("randomNum"));
            }
            if (valueFields.get(i).equals("newRandomNum")) {
                valueFields.set(i, Serenity.sessionVariableCalled("newRandomNum"));
            }
            if (valueFields.get(i).equals("newRandomNumMinus")) {
                valueFields.set(i, Serenity.sessionVariableCalled("newRandomNumMinus"));
            }
            if (valueFields.get(i).equals("randomSeries")) {
                valueFields.set(i, Serenity.sessionVariableCalled("randomSeries"));
            }
            if (valueFields.get(i).equals("newIDgenerate")) {
                valueFields.set(i, Serenity.sessionVariableCalled("newIDgenerate"));
            }
            if (valueFields.get(i).equals("newSession1")) {
                valueFields.set(i, Serenity.sessionVariableCalled("newSession1"));
            }
            if (valueFields.get(i).equals("newSession2")) {
                valueFields.set(i, Serenity.sessionVariableCalled("newSession2"));
            }
            if (valueFields.get(i).equals("id")) {
                valueFields.set(i, Serenity.sessionVariableCalled("id"));
            }
            if (valueFields.get(i).equals("SeriesNumber")) {
                valueFields.set(i, Serenity.sessionVariableCalled("SeriesNumber"));
            }
            if (valueFields.get(i).equals("PhoneNumber")) {
                valueFields.set(i, "081" + CustomerMdtIndiv3Definitions.generateRandomNumber(7));
            }
            //gọi session từ excel
            if (valueFields.get(i).contains("Session-")) {
                String text = valueFields.get(i);
                String sess = text.split("-", 2)[1];
                valueFields.set(i, Serenity.sessionVariableCalled(sess));
            }
            //điền kí tự bất kỳ
            if (valueFields.get(i).contains("RandomChar-")) {
                String text = valueFields.get(i);
                int sess = Integer.parseInt(text.split("-", 2)[1]);
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomCharacter(sess));
            }
            //điền dãy số bất kỳ
            if (valueFields.get(i).contains("RandomNum-")) {
                String text = valueFields.get(i);
                int sess = Integer.parseInt(text.split("-", 2)[1]);
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(sess));
            }
            //điền 1 chuỗi gồm ký tự và số.
            //Ví dụ: RandomCharNum-2-4
            if (valueFields.get(i).contains("RandomCharNum-")) {
                String text = valueFields.get(i);
                int character = Integer.parseInt(text.split("-", 3)[1]);
                int number = Integer.parseInt(text.split("-", 3)[2]);
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomCharacter(character) +
                        CustomerMdtIndiv3Definitions.generateRandomNumber(number));
            }
            //điền 1 chuỗi gồm số và ký tự.
            //Ví dụ: RandomCharNum-4-7
            if (valueFields.get(i).contains("RandomNumChar-")) {
                String text = valueFields.get(i);
                int character = Integer.parseInt(text.split("-", 3)[1]);
                int number = Integer.parseInt(text.split("-", 3)[2]);
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomCharacter(number) +
                        CustomerMdtIndiv3Definitions.generateRandomNumber(character));
            }
            if (valueFields.get(i).equals("M0101")) {
                valueFields.set(i, Serenity.sessionVariableCalled("datePlusYear1") + "M0101");
            }
            if (idFields.get(i + 1).contains("LIMIT.CURRENCY")) {
                boolean isPresent = fieldWithLabel("fieldName:LIMIT.CURRENCY").resolveFor(theActorInTheSpotlight()).isPresent();
                if (isPresent) {
                    valueFields.set(i, "");
                }
            }
        }
        inputData();
    }


    @And("Nhập thông tin vào trong TT")
    public void nhapThongTinVaoTrongTKTreasury() {
        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }
            //------------------Form Treasury-----------------------------
            if (valueFields.get(i).equals("customerNo")) {
                valueFields.set(i, Serenity.sessionVariableCalled("customerNo"));
            }
            //Maturity Date(date lớn hơn date hiện tại 5 ngày)
            if (valueFields.get(i).equals("Plus5Days")) {
                valueFields.set(i, Serenity.sessionVariableCalled("DATE PLUS 5"));
            }
            if (valueFields.get(i).contains("Random Text")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomString(7));
            }
            if (valueFields.get(i).contains("Random TPCount")) {
                String count = CustomerMdtIndiv3Definitions.generateRandomNumber(2);
                valueFields.set(i, count);
                Serenity.setSessionVariable("randomTPCount").to(count);
            }
            if (valueFields.get(i).contains("Random Price")) {
                String price = CustomerMdtIndiv3Definitions.getRandomNumber(1, 10);
                valueFields.set(i, price);
                Serenity.setSessionVariable("randomTPPrice").to(price);
            }
            if (valueFields.get(i).contains("Sum PD")) {
                String count = Serenity.sessionVariableCalled("randomTPCount");
                String price = Serenity.sessionVariableCalled("randomTPPrice");
                int sum = Integer.parseInt(count) * Integer.parseInt(price);
                valueFields.set(i, String.valueOf(sum));
            }
            if (valueFields.get(i).contains("Total_AUTH_bigger")) {
                String count = Serenity.sessionVariableCalled("randomTPCount");
                String price = Serenity.sessionVariableCalled("randomTPPrice");
                int sum = Integer.parseInt(count) * Integer.parseInt(price);
                int sum_Bigger = 100 + sum + Integer.parseInt(count) + Integer.parseInt(price);
                valueFields.set(i, String.valueOf(sum_Bigger));

            }
            if (valueFields.get(i).contains("Total_AUTH_smaller")) {
                String count = Serenity.sessionVariableCalled("randomTPCount");
                String price = Serenity.sessionVariableCalled("randomTPPrice");
                int sum = -100 + Integer.parseInt(count) * Integer.parseInt(price);
                int sum_Smaller = sum - Integer.parseInt(price);
                valueFields.set(i, String.valueOf(sum_Smaller));

            }
            if (valueFields.get(i).contains("Random Num")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(3));
            }
            //------------------------Form Account-------------------------------------------
            if (valueFields.get(i).equals("Customer1")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Customer1"));
            }
        }
        inputData();
    }

    @And("Nhập thông tin vào form thu phí")
    public void inputChargeForm() throws ParseException {
        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }

            if (valueFields.get(i).equalsIgnoreCase("RandomNumber3")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(3));
            }

            if (valueFields.get(i).equals("$IdBanGhinew")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Id new deal").toString());
            }

            if (valueFields.get(i).equals("${account-number}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("customerNumber").toString());
            }
            if (valueFields.get(i).equals("${customer-id}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("customerId").toString());
            }
            if (valueFields.get(i).equals("${charge-code}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("chargeCodeId").toString());
            }

            if (valueFields.get(i).equals("${acc-vip}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("accVip").toString());
            }

            if (valueFields.get(i).equals("${pd-ref}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("pdRef").toString());
            }

            if (valueFields.get(i).equals("${contract-id}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("contractId").toString());
            }

            if (valueFields.get(i).equals("${related-ref}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("relatedRef").toString());
            }
            if (valueFields.get(i).equals("${timestamp}")) {
                valueFields.set(i, String.valueOf(System.currentTimeMillis()));
            }
            if (valueFields.get(i).equals("${currency}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("currency").toString());
            }
            if (valueFields.get(i).equals("${bond-deposit}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("bondDeposit").toString());
            }
            if (valueFields.get(i).equals("${bond-agency}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("bondAgency").toString());
            }
            if (valueFields.get(i).equals("${bond-deal}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("bondDeal").toString());
            }
            if (valueFields.get(i).contains("DATE PLUS")) {
                valueFields.set(i, Serenity.sessionVariableCalled(valueFields.get(i)).toString());
            }
            if (valueFields.get(i).contains("${changed-value-date}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("changedValueDate").toString());
            }
            if (valueFields.get(i).contains("${changed-maturity-date}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("changedMaturityDate").toString());
            }
            if (valueFields.get(i).contains("${account-buy}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("accBuy").toString());
            }
            if (valueFields.get(i).contains("${customer-buy}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("customerBuy").toString());
            }
            if (valueFields.get(i).contains("${account-sell}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("accSell").toString());
            }
            if (valueFields.get(i).contains("${customer-sell}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("customerSell").toString());
            }
            if (valueFields.get(i).contains("${sell-rate}")) {
                int rate = Integer.parseInt(Serenity.sessionVariableCalled("sellRate").toString().replace(",", ""));

                valueFields.set(i, String.valueOf(1000 * rate));
            }
            if (valueFields.get(i).contains("${credit-account}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("creditAccount").toString());
            }
            if (valueFields.get(i).contains("${Random Num < 2000}")) {
                valueFields.set(i, String.valueOf(actionCommon.getNumInRange(1, 1999)));
            }
            if (valueFields.get(i).contains("${ACCT.PAY}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("ACCT.PAY").toString());
            }
            if (valueFields.get(i).contains("${ACCT.REC}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("ACCT.REC").toString());
            }
            if (valueFields.get(i).contains("${BUY.RATE}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Buy Rate.1").toString());
            }
            if (valueFields.get(i).contains("${Random String < NUMBER.LEN}")) {
                String numberLength = Serenity.sessionVariableCalled("NUMBER.LEN").toString();
                int length = Integer.parseInt(numberLength);
                String value = CustomerMdtIndiv3Definitions.generateRandomCharacter(length - 1);
                valueFields.set(i, value);
            }
            if (valueFields.get(i).contains("${Random String > NUMBER.LEN}")) {
                String numberLength = Serenity.sessionVariableCalled("NUMBER.LEN").toString();
                int length = Integer.parseInt(numberLength);
                String value = CustomerMdtIndiv3Definitions.generateRandomCharacter(length + 1);
                valueFields.set(i, value);
            }
            if (valueFields.get(i).contains("${Random String  Num > NUMBER.LEN}")) {
                String numberLength = Serenity.sessionVariableCalled("NUMBER.LEN").toString();
                int length = Integer.parseInt(numberLength);
                String value = CustomerMdtIndiv3Definitions.generateRandomString(length);
                valueFields.set(i, value);
            }
            if (valueFields.get(i).contains("${Random String Character > NUMBER.LEN}")) {
                String numberLength = Serenity.sessionVariableCalled("NUMBER.LEN").toString();
                int length = Integer.parseInt(numberLength);
                String value = CustomerMdtIndiv3Definitions.generateRandomStringAndSpeChar(length);
                valueFields.set(i, value);
            }
            if (valueFields.get(i).contains("${ACC.SELL}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("ACC.SELL").toString());
            }
            if (valueFields.get(i).contains("${ACC.BUY}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("ACC.BUY").toString());
            }
            if (valueFields.get(i).contains("${1000*RATE}")) {
                String rate = Serenity.sessionVariableCalled("RATE").toString();
                valueFields.set(i, String.valueOf(Integer.parseInt(rate) * 1000));
            }

            if (valueFields.get(i).contains("${ky-co-cau}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("kyCoCau").toString());
            }
            if (valueFields.get(i).contains("${cycled-date}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("cycledDate").toString());
            }
            if (valueFields.get(i).contains("${so-tien-cc}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("soTienCC").toString());
            }
            if (valueFields.get(i).contains("${oc-id}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("ocId").toString());
            }
            if (valueFields.get(i).contains("${limit-id-without-customer-id}")) {
                String limitId = Serenity.sessionVariableCalled("limitId").toString();
                limitId = limitId.substring(limitId.indexOf(".") + 1)
                        .replaceFirst("^[0]+", "");

                valueFields.set(i, limitId);
            }

            if (valueFields.get(i).contains("$MoreThanToday")) {
                String currentDate = Serenity.sessionVariableCalled("date time today");
                try {
                    valueFields.set(i, actionCommon.getDateTimeT24AddMonths(currentDate, BaseStringUtils.FOMART_DATE_YYYYMMDD, 1));

                } catch (ParseException e) {

                }
            }

            if (valueFields.get(i).contains("${bond-id}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("bondId").toString());
            }
            if (valueFields.get(i).contains("${company-id}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("companyId").toString());
            }
            if (valueFields.get(i).contains("${gbond-id}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("gbondId").toString());
            }
            if (valueFields.get(i).contains("${tp-buy-id}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("tpBuyId").toString());
            }
            if (valueFields.get(i).contains("${tp-sell-id}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("tpSellId").toString());
            }
            if (valueFields.get(i).contains("${bond-id-2}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("bondId2").toString());
            }
            if (valueFields.get(i).contains("${CUS.1}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("CUS.1").toString());
            }
            if (valueFields.get(i).contains("${MB.LD.TYPE.1}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("MB.LD.TYPE.1").toString());
            }
            if (valueFields.get(i).contains("${CURR1}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("CURR1").toString());
            }
            if (valueFields.get(i).contains("${RATE.FINAL}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("RATE.FINAL").toString());
            }
            if (valueFields.get(i).contains("${giu-ho-id}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("giuHoId").toString());
            }
            if (valueFields.get(i).contains("${ma-bpm}")) {
                String id = String.valueOf(System.currentTimeMillis());

                Serenity.setSessionVariable("bpmId").to(id);
                valueFields.set(i, Serenity.sessionVariableCalled("bpmId").toString());
            }
//            ANHDTN6
            if (valueFields.get(i).equals("${limit-id-with-9100}")) {
                valueFields.set(i, "09100." + Serenity.sessionVariableCalled("Stt").toString());
            }
            if (valueFields.get(i).equals("${cycledate}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("cycled_Date").toString());
            }
//            ĐIều kiện cho TC18_Bonds.Deposite.MB
            if (valueFields.get(i).equals("${forw-value-maximum}")) {
                String forow = actionCommon.getValueSection("Forw Value Maximum").replace("+", "");
                forow = forow.replace("W", "");
                int day = Integer.parseInt(forow) * 7;
                valueFields.set(i, actionCommon.getPlusDate(actionCommon.getValueSection("systemTime"), BaseStringUtils.FOMART_DATE_YYYYMMDD, day, BaseStringUtils.FOMART_DATE_YYYYMMDD));
            }
            // Điều kiện cho TC 27 tạo DP sơ cấp
            if (valueFields.get(i).contains("MONTH PLUS")) {
                valueFields.set(i, Serenity.sessionVariableCalled(valueFields.get(i)).toString());
            }

            // Điều kiện cho TC 22
            if (valueFields.get(i).equals("FixRate")) {
                valueFields.set(i, Serenity.sessionVariableCalled("FixRate"));
            }
            if (valueFields.get(i).contains("session-")) {
                valueFields.set(i, Serenity.sessionVariableCalled(valueFields.get(i).split("-", 2)[1]));
            }

        }
        inputData();
    }

    @And("Tìm kiếm charge code bất trên truy vấn auto test khác")
    public void retrieveAutoTestAccount() throws Exception {
        List<Map<String, String>> filterOptions = new ArrayList<>();

        Map<String, String> account = actionCommon.filterDataTableAndGetFirstItem(filterOptions);

        if (null == account) {
            throw new AssumptionViolatedException(
                    "This scenario does not include any 'Charge Code bất kỳ' as a precondition."
                            + " Therefore, it will be skipped!!!");
        }

        Serenity.setSessionVariable("chargeCodeId").to(account.get("OUT.COL1"));
        Serenity.recordReportData().withTitle("Charge Code Id").andContents(Serenity.sessionVariableCalled("chargeCodeId"));
    }

    @And("Nhập data từ file excel vào bảng tạo account")
    public void inputDataToCreateAnAccount() {
        String id = getDriver().findElement(By.xpath(FundsTransferComponent.FT_TEXT_XPATH)).getAttribute("value");

        Serenity.setSessionVariable("customerNumber").to(id);
        Serenity.recordReportData().withTitle("Acocunt Number:").andContents(id);

        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }

            if (valueFields.get(i).equals("Random Num")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(6));
            }

            if (valueFields.get(i).equals("${customer-id}")) {
                valueFields.set(i, Serenity.sessionVariableCalled("customerId").toString());
            }
            if (valueFields.get(i).equals("random3TypeAcCurrency")) {
                List<String> integerString = Arrays.asList("EUR", "JPY", "AUD");
                try {
                    valueFields.set(i, CustomerMdtIndiv3Definitions.generateAccCurrency(integerString));
                } catch (NoSuchAlgorithmException e) {
                }
            }

            if (valueFields.get(i).contains("session-")) {
                valueFields.set(i, Serenity.sessionVariableCalled(valueFields.get(i).split("-", 2)[1]));
            }
        }

        inputData();
    }

    @And("Tìm kiếm customner Id tân cảng")
    public void retrieveAccountTanCang() throws Exception {
        List<Map<String, String>> filterOptions = new ArrayList<>();

        Map<String, String> account = actionCommon.filterDataTableAndGetFirstItem(filterOptions);

        if (null == account) {
            throw new AssumptionViolatedException(
                    "This scenario does not include any 'Tài Khoản Tân Cảng' as a precondition."
                            + " Therefore, it will be skipped!!!");
        }

        Serenity.setSessionVariable("customerId").to(account.get("Id"));
        Serenity.recordReportData().withTitle("Customer Id").andContents(Serenity.sessionVariableCalled("customerId"));
    }

    @And("Tìm kiếm customner account trong bảng Customer's Accounts Enquiries đủ điều kiện thanh toán")
    public void retrieveValidAccountTanCang() throws Exception {

        List<Map<String, String>> filterOptions = new ArrayList<>();

        Map source = new HashMap();
        source.put("columnName", "Product code");
        source.put("operator", "EQUAL");
        source.put("valueToFilter", "1|11");
        filterOptions.add(source);

        Map source1 = new HashMap();
        source1.put("columnName", "So du kha dung");
        source1.put("operator", "GREATER");
        source1.put("valueToFilter", "1000");

        filterOptions.add(source1);

        Map<String, String> account = actionCommon.filterDataTableAndGetFirstItem(filterOptions);

        if (null == account) {
            throw new AssumptionViolatedException(
                    "This scenario does not include any 'Tài Khoản đủ điều kiện thanh toán' as a precondition."
                            + " Therefore, it will be skipped!!!");
        }

        Serenity.setSessionVariable("customerNumber").to(account.get("Account number"));
        Serenity.recordReportData().withTitle("Customer Number").andContents(Serenity.sessionVariableCalled("customerNumber"));
        Serenity.setSessionVariable("currency").to(account.get("Ccy"));
        Serenity.recordReportData().withTitle("Currency").andContents(Serenity.sessionVariableCalled("currency"));
    }

    @And("Tìm kiếm customner Id từ truy vấn application")
    public void retrieveCustomerIdTruyVan() throws Exception {
        List<Map<String, String>> filterOptions = new ArrayList<>();

        Map<String, String> account = actionCommon.filterDataTableAndGetFirstItem(filterOptions);

        if (null == account) {
            throw new AssumptionViolatedException(
                    "This scenario does not include any 'Customer Id truy vấn theo application' as a precondition."
                            + " Therefore, it will be skipped!!!");
        }

        Serenity.setSessionVariable("customerId").to(account.get("ID").split("-")[1]);
        Serenity.recordReportData().withTitle("Customer Id").andContents(Serenity.sessionVariableCalled("customerId"));
        Serenity.setSessionVariable("chargeCodeId").to(account.get("COL1"));
        Serenity.recordReportData().withTitle("Charge Code Id").andContents(Serenity.sessionVariableCalled("chargeCodeId"));
        Serenity.setSessionVariable("changeAmount").to(account.get("COL4"));
        Serenity.recordReportData().withTitle("Charge Amount").andContents(Serenity.sessionVariableCalled("changeAmount"));
    }

    @And("Nhập Thu phí tài khoản theo truy vấn")
    public void nhapThuPhiTaiKhoanTheoTruyVan() {
        for (int i = 0; i < valueFields.size(); i++) {
            valueFields.set(i, valueFields.get(i)
                    .replace("${account-number}", Serenity.sessionVariableCalled("customerNumber").toString()));
            valueFields.set(i, valueFields.get(i)
                    .replace("${customer-id}", Serenity.sessionVariableCalled("customerId").toString()));
            valueFields.set(i, valueFields.get(i)
                    .replace("${charge-code}", Serenity.sessionVariableCalled("changeCodeId").toString()));
        }

        inputData();
    }

    @And("Lấy data từ list search")
    public void layDataTuListSearch() {
        theActorInTheSpotlight().attemptsTo(
                Ensure.that(ElementsLocated.by(HomePageT24Form.FIND_BUTTON).waitingForNoMoreThan(Duration.ofSeconds(20)))
                        .isDisplayed()
        );
        actionCommon.clickElement(HomePageT24Form.FIND_BUTTON);
        theActorInTheSpotlight().attemptsTo(
                Ensure.that(ElementsLocated.by(HomePageT24Form.RESPONSE_DATA).waitingForNoMoreThan(Duration.ofSeconds(300)))
                        .isDisplayed()
        );

        List<Map<String, String>> listData = actionCommon.extractDataTable();
        for (int i = 0; i < valueFields.size(); i++) {
            if (idFields.get(i + 1).contains("BENEFICIARY.CUSTNO")) {
                if (valueFields.get(i) == null || valueFields.get(i).isEmpty()) {
                    valueFields.set(i, listData.get(0).get("CUSTOMER.ID"));
                }
            }
            if (idFields.get(i + 1).contains("APPLICANT.CUSTNO")) {
                if (valueFields.get(i) == null || valueFields.get(i).isEmpty()) {
                    valueFields.set(i, listData.get(1).get("CUSTOMER.ID"));
                }
            }
        }
    }

    @And("Nhập thông tin bản ghi Data Capture")
    public void nhapThongTinBanGhiDataCapture() {
        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }
            if (valueFields.get(i).contains("Random Text")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomString(8));
            }
            if (valueFields.get(i).contains("Random Num")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(6));
            }
            if (valueFields.get(i).equals("Filter Account")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Filter Account"));
            }
            if (valueFields.get(i).equals("Random Account")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Random Account"));
            }
            if (valueFields.get(i).equals("Greater Avail Bal")) {
                double lockAmount = Double.parseDouble(Serenity.sessionVariableCalled("Avail Balance").toString().replace(",", "")) * 0.9 + 1;
                Serenity.setSessionVariable("lockAmount").to(lockAmount);
                valueFields.set(i, String.format("%.0f", lockAmount));
            }
            if (valueFields.get(i).equals("Filter Acc No")) {
                valueFields.set(i, Serenity.sessionVariableCalled("acc-no"));
            }
            if (valueFields.get(i).equals("Greater Lock Amount")) {
                double availBal = Double.parseDouble(Serenity.sessionVariableCalled("lockAmount").toString()) + 1000;
                valueFields.set(i, String.format("%.0f", availBal));
            }
            if (valueFields.get(i).contains("Random Text Number")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomString(5)
                        + CustomerMdtIndiv3Definitions.generateRandomNumber(3));
            }
            if (valueFields.get(i).contains("BPM Before")) {
                valueFields.set(i, Serenity.sessionVariableCalled("bpm-before"));
            }
            if (valueFields.get(i).contains("amount")) {
                valueFields.set(i, Serenity.sessionVariableCalled("amount"));
            }
            if (valueFields.get(i).equals("Greatest")) {
                double amountLcy = Double.parseDouble(Serenity.sessionVariableCalled("Avail Balance").toString().replace(",", "")) + 1000000;
                valueFields.set(i, String.format("%.0f", amountLcy));
            }
            if (valueFields.get(i).equals("Smaller Lock Amount")) {
                double availBal = Double.parseDouble(Serenity.sessionVariableCalled("Avail Balance").toString().replace(",", ""))
                        - Double.parseDouble(Serenity.sessionVariableCalled("lockAmount").toString())
                        + 1000;
                valueFields.set(i, String.format("%.0f", availBal));
            }
            if (valueFields.get(i).equals("Smaller Avail Bal")) {
                double amount = Double.parseDouble(Serenity.sessionVariableCalled("Avail Balance").toString().replace(",", ""))
                        - Double.parseDouble(Serenity.sessionVariableCalled("lockAmount").toString())
                        - 1;
                if (amount < 0) amount = 0;
                valueFields.set(i, String.format("%.0f", amount));
            }
            if (valueFields.get(i).equals("Greater Today")) {
                valueFields.set(i, Serenity.sessionVariableCalled("DATE PLUS 1"));
            }
            if (valueFields.get(i).equals("Filter Category")) {
                valueFields.set(i, Serenity.sessionVariableCalled("category"));
            }
            if (valueFields.get(i).equals("Smaller Today")) {
                valueFields.set(i, Serenity.sessionVariableCalled("DATE PLUS -1"));
            }
            if (valueFields.get(i).equals("Filter Currency")) {
                valueFields.set(i, Serenity.sessionVariableCalled("currency"));
            }
            if (valueFields.get(i).equals("Filter ID")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Filter ID"));
            }
            if (valueFields.get(i).contains("session-")) {
                valueFields.set(i, Serenity.sessionVariableCalled(valueFields.get(i).split("-", 2)[1]));
            }
            if (valueFields.get(i).contains("greater working balance")) {
                double availBal = Double.parseDouble(Serenity.sessionVariableCalled("Working Balance").toString().replace(",", "")) + 100;
                valueFields.set(i, String.format("%.0f", availBal));
            }
        }
        inputData();
    }

    @And("Search thông tin Transaction Cde")
    public void searchThongTinTransactionCde() {
        actionCommon.clickElement(MbRmDoiTacComponent.clearSelection());

        String sign = "";
        for (int i = 0; i < valueFields.size(); i++) {
            if (idFields.get(i + 1).contains("SIGN") && idFields.get(i + 1).contains("radio")) {
                sign = valueFields.get(i);
            }
        }

        if (sign.equalsIgnoreCase("c")) {
            actionCommon.typeText(HomePageT24Form.getSearchKey("DEBIT.CREDIT.IND"), "CREDIT");
        } else if (sign.equalsIgnoreCase("d")) {
            actionCommon.typeText(HomePageT24Form.getSearchKey("DEBIT.CREDIT.IND"), "DEBIT");
        }

        actionCommon.clickRunSelection();
        theActorInTheSpotlight().attemptsTo(
                WaitUntil.the(HomePageT24Form.QUERIED_TABLE, WebElementStateMatchers.isVisible())
                        .forNoMoreThan(180).seconds());
    }

    @And("Tìm kiếm Account đủ điều kiện thanh toán từ truy vấn khác")
    public void retrieveAccountSoDep() throws Exception {
        List<Map<String, String>> filterOptions = new ArrayList<>();

        Map<String, String> account = actionCommon.filterDataTableAndGetFirstItem(filterOptions);

        if (null == account) {
            throw new AssumptionViolatedException(
                    "This scenario does not include any 'Customer Id truy vấn theo application' as a precondition."
                            + " Therefore, it will be skipped!!!");
        }

        Serenity.setSessionVariable("customerNumber").to(account.get("ID"));
        Serenity.recordReportData().withTitle("Customer Number").andContents(Serenity.sessionVariableCalled("customerNumber"));
        Serenity.setSessionVariable("customerId").to(account.get("COL1"));
        Serenity.recordReportData().withTitle("Customer Id").andContents(Serenity.sessionVariableCalled("customerId"));
    }

    @And("Tìm kiếm tài khoản truy vấn auto test khác TKSODEPDN và TKSODEPBIZ")
    public void retrieveAnotherAutoTestAccount() throws Exception {
        List<Map<String, String>> filterOptions = new ArrayList<>();

        Map source = new HashMap();
        source.put("columnName", "OUT.COL1");
        source.put("operator", "NOT_EQUAL");
        source.put("valueToFilter", "TKSODEPDN&TKSODEPBIZ");

        filterOptions.add(source);

        Map<String, String> account = actionCommon.filterDataTableAndGetFirstItem(filterOptions);

        if (null == account) {
            throw new AssumptionViolatedException(
                    "This scenario does not include any 'Tài Khoản Truy vấn auto test có Charge Code " +
                            "khác TKSODEPDN và TKSODEPBIZ' as a precondition. Therefore, it will be skipped!!!");
        }

        Serenity.setSessionVariable("chargeCodeId").to(account.get("OUT.COL1"));
        Serenity.recordReportData().withTitle("Charge Code Id").andContents(Serenity.sessionVariableCalled("chargeCodeId"));
    }

    @And("Tìm kiếm customner number bất kỳ")
    public void retrieveRandomAccount() throws Exception {
        actionCommon.waitVisible(HomePageT24Form.ENQUIRY_RESPONSE_DATA, 180);
        List<Map<String, String>> filterOptions = new ArrayList<>();

        Map<String, String> account = actionCommon.filterDataTableAndGetFirstItem(filterOptions);

        if (null == account) {
            throw new AssumptionViolatedException(
                    "This scenario does not include any 'Customer Number bất kỳ' as a precondition."
                            + " Therefore, it will be skipped!!!");
        }

        Serenity.setSessionVariable("customerNumber").to(account.get("Account.number"));
        Serenity.recordReportData().withTitle("customerNumber").andContents(Serenity.sessionVariableCalled("customerNumber"));
        Serenity.setSessionVariable("customerId").to(account.get("Customer.id"));
        Serenity.recordReportData().withTitle("customerId").andContents(Serenity.sessionVariableCalled("customerId"));
    }

    @And("Tìm kiếm customer id theo Truy vấn autotest")
    public void retrieveAutoTestCustomerId() throws Exception {
        List<Map<String, String>> filterOptions = new ArrayList<>();

        Map<String, String> account = actionCommon.filterDataTableAndGetFirstItem(filterOptions);

        if (null == account) {
            throw new AssumptionViolatedException(
                    "This scenario does not include any 'Auto test customer id' as a precondition."
                            + " Therefore, it will be skipped!!!");
        }

        actionCommon.setValueSection("customerId", account.get("ID"));
    }

    @And("Tìm kiếm charge code id theo Truy vấn autotest")
    public void retrieveAutoTestChargeCodeId() throws Exception {
        List<Map<String, String>> filterOptions = new ArrayList<>();

        Map<String, String> account = actionCommon.filterDataTableAndGetFirstItem(filterOptions);

        if (null == account) {
            throw new AssumptionViolatedException(
                    "This scenario does not include any 'Auto test charge code id' as a precondition."
                            + " Therefore, it will be skipped!!!");
        }

        Serenity.setSessionVariable("chargeCodeId").to(account.get("ID"));
        Serenity.recordReportData().withTitle("Charge Code Id").andContents(Serenity.sessionVariableCalled("chargeCodeId"));
    }

    @And("Tìm kiếm danh sách active customer account theo Truy vấn autotest")
    public void retrieveAutoTestActiveAccount() throws Exception {
        List<Map<String, String>> filterOptions = new ArrayList<>();
        Map source = new HashMap();
        source.put("columnName", "OUT.COL1");
        source.put("operator", "EQUAL");
        source.put("valueToFilter", "ACTIVE");
        filterOptions.add(source);

        List<Map<String, String>> accounts = actionCommon.filterDataTable(filterOptions);

        if (accounts.size() == 0) {
            throw new AssumptionViolatedException(
                    "This scenario does not include any 'Auto test active account' as a precondition."
                            + " Therefore, it will be skipped!!!");
        }

        List<String> accountNumbers = new ArrayList<>();

        for (Map<String, String> account : accounts) {
            accountNumbers.add(account.get("ID"));
        }

        Serenity.setSessionVariable("listOfCustomerNumbers").to(String.join(",", accountNumbers));
        Serenity.recordReportData().withTitle("List Of Acocunt Number")
                .andContents(Serenity.sessionVariableCalled("listOfCustomerNumbers"));
    }

    @And("Tìm kiếm tài khoản truy vấn auto test hợp lệ dựa trên danh sách account id")
    public void retrieveAutoTestAccountViaSpecificIds() throws Exception {
        actionCommon.switchToChildWindowsWithContainsTitle("Thong tin TK");

        for (String id : Serenity.sessionVariableCalled("listOfCustomerNumbers").toString().split(",")) {

            // Filter table by inputting account id into search field
            actionCommon.typeText(HomePageT24Form.getSearchKey("ACCT.ID"), id);

            actionCommon.clickRunSelection();

            HomePageT24Form.LOADING_SCREEN.resolveFor(theActorInTheSpotlight()).isPresent();
            WaitUntil.the(HomePageT24Form.LOADING_SCREEN, WebElementStateMatchers.isNotPresent())
                    .forNoMoreThan(180).seconds();

            // Extract data table and return the first suitable row
            List<Map<String, String>> filterOptions = new ArrayList<>();
            Map source = new HashMap();
            source.put("columnName", "Prt code");
            source.put("operator", "EQUAL");
            source.put("valueToFilter", "1|11");
            filterOptions.add(source);

            Map source1 = new HashMap();
            source1.put("columnName", "Avail balance");
            source1.put("operator", "GREATER");
            source1.put("valueToFilter", "1000");
            filterOptions.add(source1);

            Map<String, String> account = actionCommon.filterDataTableAndGetFirstItem(filterOptions);

            if (null == account) continue;

            Serenity.setSessionVariable("customerNumber").to(account.get("Account"));
            Serenity.recordReportData().withTitle("customerNumber").andContents(Serenity.sessionVariableCalled("customerNumber"));
            Serenity.setSessionVariable("customerId").to(account.get("Customer"));
            Serenity.recordReportData().withTitle("customerId").andContents(Serenity.sessionVariableCalled("customerId"));

            return;
        }

        if (null == Serenity.sessionVariableCalled("customerNumber")) {
            throw new AssumptionViolatedException(
                    "This scenario does not include any 'Tài Khoản Truy vấn auto test hợp lệ' as a precondition."
                            + " Therefore, it will be skipped!!!");
        }
    }

    @And("Tìm kiếm record id theo Truy vấn autotest")
    public void retrieveAutoTestRecordId() throws Exception {
        List<Map<String, String>> filterOptions = new ArrayList<>();

        Map<String, String> account = actionCommon.filterDataTableAndGetFirstItem(filterOptions);

        if (null == account) {
            throw new AssumptionViolatedException(
                    "This scenario does not include any 'Record Id bất kỳ' as a precondition."
                            + " Therefore, it will be skipped!!!");
        }

        Serenity.setSessionVariable("recordId").to(account.get("ID"));
        Serenity.recordReportData().withTitle("Record Id").andContents(Serenity.sessionVariableCalled("recordId"));
    }

    @And("Tìm kiếm danh sách inactive customer account theo Truy vấn autotest")
    public void retrieveAutoTestInActiveAccount() throws Exception {
        List<Map<String, String>> filterOptions = new ArrayList<>();
        Map source = new HashMap();
        source.put("columnName", "OUT.COL1");
        source.put("operator", "NOT_EQUAL");
        source.put("valueToFilter", "ACTIVE");
        filterOptions.add(source);

        List<Map<String, String>> accounts = actionCommon.filterDataTable(filterOptions);

        if (accounts.size() == 0) {
            throw new AssumptionViolatedException(
                    "This scenario does not include any 'Auto test active account' as a precondition."
                            + " Therefore, it will be skipped!!!");
        }

        List<String> accountNumbers = new ArrayList<>();

        for (Map<String, String> account : accounts) {
            accountNumbers.add(account.get("ID"));
        }

        Serenity.setSessionVariable("listOfCustomerNumbers").to(String.join(",", accountNumbers));
        Serenity.recordReportData().withTitle("List Of Acocunt Number")
                .andContents(Serenity.sessionVariableCalled("listOfCustomerNumbers"));
    }

    @And("Tìm kiếm account trong Truy vấn TK Auto test bất kỳ")
    public void retrieveTruyVanTKAccount() throws Exception {
        List<Map<String, String>> filterOptions = new ArrayList<>();

        Map<String, String> account = actionCommon.filterDataTableAndGetFirstItem(filterOptions);

        if (null == account) {
            createNewTK();
        } else {

            Serenity.setSessionVariable("customerNumber").to(account.get("Account"));
            Serenity.recordReportData().withTitle("customerNumber").andContents(Serenity.sessionVariableCalled("customerNumber"));
            Serenity.setSessionVariable("customerId").to(account.get("Customer"));
            Serenity.recordReportData().withTitle("customerId").andContents(Serenity.sessionVariableCalled("customerId"));
            Serenity.setSessionVariable("currency").to(account.get("Currency"));
            Serenity.recordReportData().withTitle("Currency").andContents(Serenity.sessionVariableCalled("currency"));
        }
    }

    @And("Nhập bản ghi cheque issue")
    public void nhapBanGhiChequeIssue() {
        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }
            if (valueFields.get(i).contains("Filter Cheque")) {
                String k = Serenity.sessionVariableCalled("Filter ID").toString().split("\\.")[1];
                double kPlus1 = Double.parseDouble(k) + 1;
                valueFields.set(i, String.format("%.0f", kPlus1));
            }
            if (valueFields.get(i).contains("Filter Account")) {
                String value = Serenity.sessionVariableCalled("Filter Account");
                valueFields.set(i, value);
            }
            if (valueFields.get(i).equals("k")) {
                String k = Serenity.sessionVariableCalled("k");
                double kPlus1 = Double.parseDouble(k) + 1;
                valueFields.set(i, String.format("%.0f", kPlus1));
            }
            if (valueFields.get(i).equals("no-start")) {
                valueFields.set(i, Serenity.sessionVariableCalled("no-start"));
            }
            if (valueFields.get(i).contains("Filter Customer")) {
                String value = Serenity.sessionVariableCalled("customerId");
                valueFields.set(i, value);
            }
            if (valueFields.get(i).contains("session-")) {
                String value = Serenity.sessionVariableCalled(valueFields.get(i).split("-", 2)[1]);
                valueFields.set(i, value);
            }
        }
        inputData();
    }

    @And("Lấy K ra lưu vào session")
    public void getK() {
        Serenity.setSessionVariable("k").to(valueFields.get(0));
        Serenity.recordReportData().withTitle("Start No").andContents(valueFields.get(0));
    }

    @And("lấy date time T24")
    public void getDateTimeTodayT24() {
        String dateTime = actionCommon.getDateTimeT24();
        Serenity.setSessionVariable("date time today").to(dateTime);
        Serenity.setSessionVariable("systemTime").to(actionCommon.convertFormatDate(dateTime, BaseStringUtils.FOMART_DATE_DD_MMM_YYYY, BaseStringUtils.FOMART_DATE_YYYYMMDD));
        Serenity.recordReportData().withTitle("date time today").andContents(Serenity.sessionVariableCalled("date time today"));
    }

    @And("Click Prints the deal slip")
    public void clickPrintTheDeal() {
        theActorInTheSpotlight().attemptsTo(
                WaitUntil.the(PRINTS_THE_DEAL_BTN, WebElementStateMatchers.isVisible()).
                        forNoMoreThan(30).seconds(),
                Click.on(PRINTS_THE_DEAL_BTN));
    }

    @Then("Hệ thống hiển thị text: {}")
    public void heThongHienTxnComplete(String message) {
        actionCommon.waitVisible(CAPTION);
        String cation = Text.of(CAPTION).viewedBy(theActorInTheSpotlight()).asString();
        String mess = Text.of(Message).viewedBy(theActorInTheSpotlight()).asString();
        theActorInTheSpotlight().attemptsTo(Ensure.that(cation + " " + mess).contains(message));

        Serenity.recordReportData().withTitle("text display").andContents(message);
    }

    @And("Click droplist và chọn giá trị bất kỳ")
    public void getAnyValueDropList(DataTable dataTable) throws Exception {
        List<Map<String, String>> list = dataTable.asMaps(String.class, String.class);

        for (Map<String, String> stringStringMap : list) {
            actionCommon.waitVisible(HomePageT24Form.GO_BUTTON);
            actionCommon.clickElement(AccountComponent.getValueDropList(stringStringMap.get("field")));

            theActorInTheSpotlight().attemptsTo(
                    WaitUntil.the(FixedDepositComponent.MulitDepositsForm.LIST_DROP_DEPOSIT_PRODUCT, WebElementStateMatchers.isVisible()).forNoMoreThan(200).seconds());

            List<WebElement> listProduct = getDriver().findElements(By.xpath(FixedDepositComponent.MulitDepositsForm.LIST_DROP_DEPOSIT_PRODUCT));
            Random generator = SecureRandom.getInstanceStrong();

            int index = 0;
            if (listProduct.size() > 0) {
                int max = listProduct.size() - 1;
                int min = 0;
                index = generator.nextInt(max - min + 1) + min;
            } else {
                throw new Exception("không tìm được giá trị trong drop list");
            }

            WebElement colFirstElement = AccountComponent.radomvalueDroplist1(listProduct.get(index));
            String val = colFirstElement.getAttribute("innerText");

            actionCommon.clearText(AccountComponent.inputValueFromDropList(stringStringMap.get("field")).getCssOrXPathSelector());
            actionCommon.typeText(AccountComponent.inputValueFromDropList(stringStringMap.get("field")), val + Keys.TAB);
            actionCommon.clickElement(AccountComponent.SPAN_TRANSACTION_ID);
            //set selected value to section
            actionCommon.setValueSection("selectedValue", val);
            theActorInTheSpotlight().attemptsTo(
                    WaitUntil.the(FixedDepositComponent.MulitDepositsForm.LIST_DROP_DEPOSIT_PRODUCT, WebElementStateMatchers.isNotVisible()).forNoMoreThan(200).seconds());
        }
    }

    @And("Lấy {string} không theo điều kiện")
    public void layDataKhongTheoDieuKien(String cot) throws Exception {
        List<Map<String, String>> filterOptions = new ArrayList<>();

        Map source = new HashMap();
        source.put("columnName", cot);
        source.put("operator", "NOT_EQUAL");
        source.put("valueToFilter", "");

        filterOptions.add(source);

        Map<String, String> data = actionCommon.filterDataTableAndGetFirstItem(filterOptions);
        actionCommon.setValueSection(cot, data.get(cot));
    }

    @And("Click droplist và chọn giá trị đầu tiên")
    public void getFirstValueDropList(DataTable dataTable) {
//        actionCommon.pause(3000);

        List<Map<String, String>> list = dataTable.asMaps(String.class, String.class);
        for (Map<String, String> stringStringMap : list) {
            actionCommon.waitVisible(HomePageT24Form.GO_BUTTON);
            actionCommon.clickElement(AccountComponent.getValueDropList(stringStringMap.get("field")));
            theActorInTheSpotlight().attemptsTo(
                    WaitUntil.the(FixedDepositComponent.MulitDepositsForm.LIST_DROP_DEPOSIT_PRODUCT, WebElementStateMatchers.isVisible()).forNoMoreThan(180).seconds());
            Serenity.takeScreenshot();
            actionCommon.clickElement(AccountComponent.FIRST_ITERM_DROPLIST);
            Serenity.takeScreenshot();
            theActorInTheSpotlight().attemptsTo(
                    WaitUntil.the(FixedDepositComponent.MulitDepositsForm.LIST_DROP_DEPOSIT_PRODUCT, WebElementStateMatchers.isNotVisible()).forNoMoreThan(180).seconds());
        }
    }

    @And("Lấy data từ list search để nhập liêu gia hạn hợp đồng")
    public void layDataTuListSearchDeNhapLieuGiaHanHopDong() {
        List<Map<String, String>> listData = actionCommonRTN.extractDataTable();
        actionCommon.switchToChildWindowsWithContainsTitle(",GIAHAN");
        for (Map<String, String> row : listData) {
            do {
                actionCommon.editAContract(row.get("Id"));
                if (HomePageT24Form.COMMIT_THE_DEAL.resolveFor(theActorInTheSpotlight()).isPresent()) {
                    Serenity.setSessionVariable("id").to(row.get("Id"));
                    return;
                }
            } while (HomePageT24Form.COMMIT_THE_DEAL.resolveFor(theActorInTheSpotlight()).isPresent());
        }
    }

    @And("Lấy data từ list search để nhập liêu gia hạn hợp đồng có trường {string} {string} null")
    public void layDataTuListSearchDeNhapLieuGiaHanHopDongCoDieuKien(String field, String status) {
        List<Map<String, String>> listData = actionCommonRTN.extractDataTable();
        actionCommon.switchToChildWindowsWithContainsTitle(",GIAHAN");
        for (Map<String, String> row : listData) {
            actionCommon.editAContract(row.get("Id"));
            Serenity.setSessionVariable("id").to(row.get("Id"));
            if (HomePageT24Form.COMMIT_THE_DEAL.resolveFor(theActorInTheSpotlight()).isPresent()) {
                if (status.equalsIgnoreCase("equal")) {
                    if (!HomePageT24Form.containsTextField("tab1", field).resolveFor(theActorInTheSpotlight()).isPresent()) {
                        return;
                    } else {
                        actionCommon.clickReturnToApplicationScreen();
                    }
                } else {
                    if (HomePageT24Form.containsTextField("tab1", field).resolveFor(theActorInTheSpotlight()).isPresent()) {
                        return;
                    }
                }
            } else {
                continue;
            }
        }
    }

    @And("Nhập bản ghi gia hạn hợp đồng")
    public void nhapBanGhiGiaHanHopDong() {
        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }
            if (valueFields.get(i).contains("Random Text Number")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomString(3)
                        + CustomerMdtIndiv3Definitions.generateRandomNumber(3));
            }
            if (valueFields.get(i).contains("Random 1-24")) {
                valueFields.set(i, String.valueOf(actionCommon.getNumInRange(1, 24)));
            }
            if (valueFields.get(i).contains("customerId")) {
                valueFields.set(i, Serenity.sessionVariableCalled("customerId"));
            }
            if (valueFields.get(i).contains("Filter Account")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Filter Account"));
            }
            if (valueFields.get(i).contains("customer-dif")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(6));
            }
        }
        inputData();
    }

    @And("Tính ra tổng số phí và lưu vào session")
    public void tinhRaTongSoPhiVaLuuVaoSession() {
        int kyHan = 0, soLuong = 0;

        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }
            if (idFields.get(i + 1).contains("GIUHO.KY.HAN")) {
                kyHan = Integer.parseInt(valueFields.get(i));
            }
            if (idFields.get(i + 1).contains("GIUHO.SO.LUONG:1")) {
                soLuong += Integer.parseInt(valueFields.get(i));
            }
            if (idFields.get(i + 1).contains("GIUHO.SO.LUONG:2")) {
                soLuong += Integer.parseInt(valueFields.get(i)) / 100;
            }
        }
        double flatAmt = Double.parseDouble(Serenity.sessionVariableCalled("Flat Amt.1").toString().replaceAll(",", ""));
        double tongSo = kyHan * soLuong * flatAmt;
        actionCommon.setValueSection("so-phi", String.format("%.0f", tongSo));
//        Serenity.setSessionVariable("so-phi").to(String.format("%.0f", tongSo));
    }

    @And("Input/Edit data form")
    public void IEDataForm() {
        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }
            if (valueFields.get(i).equals("Random String and set session")) {
                String text = CustomerMdtIndiv3Definitions.generateRandomString(5);
                valueFields.set(i, text);
                actionCommon.setValueSection("strRandomAndSession", text);
            }
            if (valueFields.get(i).equals("Random Number and set session")) {
                String number = CustomerMdtIndiv3Definitions.generateRandomNumber(5);
                valueFields.set(i, number);
                actionCommon.setValueSection("numRandomAndSession", number);
            }
            if (valueFields.get(i).contains("Random Number vs String and set session")) {
                String text = CustomerMdtIndiv3Definitions.generateRandomString(5);
                String number = CustomerMdtIndiv3Definitions.generateRandomNumber(5);
                String value = number + text;
                valueFields.set(i, value);
                actionCommon.setValueSection("NumTextRandomSession", value);
            }
            if (valueFields.get(i).contains("Random Text")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomString(7));
            }
            if (valueFields.get(i).contains("Random Email")) {
                valueFields.set(i, Serenity.sessionVariableCalled("randomTextAndEmail"));
            }
            if (valueFields.get(i).equals("NextDay")) {
                valueFields.set(i, Serenity.sessionVariableCalled("DATE PLUS 1"));
            }
            if (valueFields.get(i).equals("ID CUSTOMER 2")) {
                valueFields.set(i, Serenity.sessionVariableCalled("ID2"));
            }
            if (valueFields.get(i).equals("ID CUSTOMER 3")) {
                valueFields.set(i, Serenity.sessionVariableCalled("ID3"));
            }
            if (valueFields.get(i).equals("ID VNT.CAP.CUST.NAT.ID")) {
                valueFields.set(i, Serenity.sessionVariableCalled("customerId"));
            }
            if (valueFields.get(i).equals("Account Db")) {
                valueFields.set(i, Serenity.sessionVariableCalled("accValue"));
            }
            if (valueFields.get(i).equals("RandomAcc")) {
                valueFields.set(i, Serenity.sessionVariableCalled("RandomAcc"));
            }
            if (valueFields.get(i).equals("The day before")) {
                valueFields.set(i, Serenity.sessionVariableCalled("DATE PLUS -1"));
            }
            if (valueFields.get(i).equals("Random 8 numbers")) {
                String text = CustomerMdtIndiv3Definitions.generateRandomNumber(8);
                valueFields.set(i, text);
                actionCommon.setValueSection("numRandom8AndSession", text);
            }
            if (valueFields.get(i).equals("Random 2 numbers")) {
                String text = CustomerMdtIndiv3Definitions.generateRandomNumber(8);
                valueFields.set(i, text);
                actionCommon.setValueSection("numRandom2AndSession", text);
            }
            if (valueFields.get(i).equals("Account Random")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Account"));
            }
            if (valueFields.get(i).equals("m21_id2")) {
                valueFields.set(i, Serenity.sessionVariableCalled("m21_id2"));
            }
            if (valueFields.get(i).equals("m21_id1")) {
                valueFields.set(i, Serenity.sessionVariableCalled("m21_id1"));
            }
            if (valueFields.get(i).equals("m21_id1Both")) {
                valueFields.set(i, Serenity.sessionVariableCalled("m21_id1Both"));
            }
            if (valueFields.get(i).equals("m21_idUSD")) {
                valueFields.set(i, Serenity.sessionVariableCalled("m21_idUSD"));
            }
            if (valueFields.get(i).equals("m21_idHKD")) {
                valueFields.set(i, Serenity.sessionVariableCalled("m21_idHKD"));
            }
            if (valueFields.get(i).equals("m21_id2New")) {
                valueFields.set(i, Serenity.sessionVariableCalled("@ID"));
            }
            if (valueFields.get(i).equals("m21_account")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Account"));
            }
            if (valueFields.get(i).equals("m21_accountRec")) {
                valueFields.set(i, Serenity.sessionVariableCalled("m21_accountRec"));
            }
            if (valueFields.get(i).equals("m21_accountPay")) {
                valueFields.set(i, Serenity.sessionVariableCalled("m21_accountPay"));
            }
            if (valueFields.get(i).equals("m21_customer")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Customer"));
            }
            if (valueFields.get(i).equals("m21_subProduct")) {
                valueFields.set(i, Serenity.sessionVariableCalled("m21_subProduct"));
            }
            if (valueFields.get(i).equals("transactionId2")) {
                valueFields.set(i, Serenity.sessionVariableCalled("transactionId2"));
            }
            if (valueFields.get(i).equals("transactionId")) {
                valueFields.set(i, Serenity.sessionVariableCalled("transactionId"));
            }
            if (valueFields.get(i).equals("m21_Id")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Id"));
            }
            if (valueFields.get(i).equals("randomNum")) {
                valueFields.set(i, Serenity.sessionVariableCalled("randomNum"));
            }
            if (valueFields.get(i).contains("RELATIONSHIP")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Relation"));
            }
            if (valueFields.get(i).contains("$sessionKey =")) {
                String sessionKey = valueFields.get(i).split("=", 2)[1].trim();
                valueFields.set(i, Serenity.sessionVariableCalled(sessionKey));
            }
            if (valueFields.get(i).contains("${BUY.RATE}")) {
                valueFields.set(i, Serenity.sessionVariableCalled(" Buy Rate.1").toString());
            }
            if (valueFields.get(i).equals("Customer")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Customer").toString());
            }
            if (valueFields.get(i).equals("session-limitRef")) {
                valueFields.set(i, Serenity.sessionVariableCalled("limitRef").toString());
            }
            if (valueFields.get(i).equals("AccountInTalbe")) {
                valueFields.set(i, Serenity.sessionVariableCalled("AccountInTalbe").toString());
            }
            if (valueFields.get(i).contains("RandEmail")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomString(6).toLowerCase(Locale.ROOT) + "@gmail.com");
            }
            //VIP
            //m21_abc
            if (valueFields.get(i).contains("m21")) {
                String text = valueFields.get(i);
                String sess = text.split("_", 2)[1];
                valueFields.set(i, Serenity.sessionVariableCalled(sess));
            }
        }
        inputData();
    }

    @And("Nhập bản ghi cmpany central")
    public void nhapBanGhiCompanyCentral() {
        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }
            if (valueFields.get(i).equals("ID CUSTOMER 1")) {
                valueFields.set(i, Serenity.sessionVariableCalled("ID1"));
            }
            if (valueFields.get(i).equals("ID CUSTOMER 2")) {
                valueFields.set(i, Serenity.sessionVariableCalled("ID2"));
            }
        }
        inputData();
    }

    //    FPT_AnhDTN6
    @And("Nhập thông tin vào form Bonds.Deposite")
    public void nhapThongTinVaoFormBondsDeposite() throws ParseException {
        String valueDate = Serenity.sessionVariableCalled("fromDate"); // đã format về dạng yyyyMMdd

        String maturityDate = actionCommon.convertFormatDate(actionCommon.getValueSection("maturityDate"),
                BaseStringUtils.FOMART_DATE_DD_MMM_YYYY, BaseStringUtils.FOMART_DATE_YYYYMMDD);

        String quantityLocked = actionCommon.getValueSection("Quantity Locked.1");
        int min = Integer.parseInt(quantityLocked.replace(",", ""));
        String quantity = actionCommon.getValueSection(" Quantity");
        int max = Integer.parseInt(quantity.replace(",", ""));
        String currentTime = actionCommon.getValueSection("DATE PLUS 1");

        String bondsDeposite = actionCommon.getValueSection("DP");

        int quantityTrsf = max - min;

        int dayBetween = actionCommon.getDayBetweenTwoDate(currentTime, maturityDate, BaseStringUtils.FOMART_DATE_YYYYMMDD);

        for (int i = 0; i < valueFields.size(); i++) {

            if (valueFields.get(i).equalsIgnoreCase("BondDeposite")) {
                valueFields.set(i, bondsDeposite);
            }

            if (valueFields.get(i).equalsIgnoreCase("RandomCharacter")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomString(10));
            }

            if (valueFields.get(i).equalsIgnoreCase("customerId")) {
                valueFields.set(i, Serenity.sessionVariableCalled("acc1"));
            }

            if (valueFields.get(i).equalsIgnoreCase("RandomNumber")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(10));
            }

            if (valueFields.get(i).equalsIgnoreCase("QuantityTransfer")) {
                valueFields.set(i, String.valueOf(quantityTrsf + 10000));
            }

            if (valueFields.get(i).equalsIgnoreCase("betweenTwoDate")) {
                valueFields.set(i, currentTime);
            }

            if (valueFields.get(i).equalsIgnoreCase(">valueDate")) {
                valueFields.set(i, actionCommon.getPlusDate(valueDate, BaseStringUtils.FOMART_DATE_YYYYMMDD, 10, BaseStringUtils.FOMART_DATE_YYYYMMDD));
            }


        }

        inputData();
    }

    @And("{} lấy giá trị teller id từ excel và lưu vào session")
    public void getTellerIdFromExel(String actor) {
        String tellerId = "";
        if (actor.equalsIgnoreCase("AnhTT64")) {
            tellerId = valueFields.get(0);
        } else {
            tellerId = valueFields.get(1);
        }
        Serenity.setSessionVariable("tellerId").to(tellerId);
        Serenity.recordReportData().withTitle("Teller ID").andContents(tellerId);
    }

    @And("Nhập bản ghi teller")
    public void inputTellerRecord() throws ParseException {
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat format = new SimpleDateFormat(BaseStringUtils.FOMART_DATE_YYYYMMDD);
        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }
            if (valueFields.get(i).contains("session-")) {
                valueFields.set(i, Serenity.sessionVariableCalled(valueFields.get(i).split("-", 2)[1]));
            }
            if (valueFields.get(i).equalsIgnoreCase("Filter Account")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Filter Account"));
            }
            if (valueFields.get(i).equalsIgnoreCase("Acct.1")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Acct.1"));
            }
            if (valueFields.get(i).equalsIgnoreCase("Smaller Avail bal")) {
                double value = Double.parseDouble(Serenity.sessionVariableCalled("Avail Balance").toString().replace(",", "")) * 0.1;
                valueFields.set(i, String.format("%.0f", value));
            }
            if (valueFields.get(i).equalsIgnoreCase("Greater Tygia Tran")) {
                double value = Double.parseDouble(Serenity.sessionVariableCalled("Tygia Tran").toString().replace(",", "")) + 1;
                valueFields.set(i, String.format("%.0f", value));
            }
            if (valueFields.get(i).equalsIgnoreCase("Smaller Tygia San")) {
                double value = Double.parseDouble(Serenity.sessionVariableCalled("Tygia San").toString().replace(",", "")) - 1;
                valueFields.set(i, String.format("%.0f", value));
            }
            if (valueFields.get(i).equals("Greater Tygia San")) {
                double value = Double.parseDouble(Serenity.sessionVariableCalled("Tygia San").toString().replace(",", "")) + 1;
                valueFields.set(i, String.format("%.0f", value));
            }
            if (valueFields.get(i).equalsIgnoreCase("Between Tygia")) {
                double giaSan = Double.parseDouble(Serenity.sessionVariableCalled("Tygia San").toString().replace(",", ""));
                double giaTran = Double.parseDouble(Serenity.sessionVariableCalled("Tygia Tran").toString().replace(",", ""));
                double value = giaSan + (giaTran - giaSan) * 0.5;
                valueFields.set(i, String.format("%.0f", value));
            }
            if (valueFields.get(i).equalsIgnoreCase("Working Balance + Amount < 5m")) {
                double value = 5000000 - Double.parseDouble(Serenity.sessionVariableCalled("Working Balance").toString().replace(",", "")) - 1;
                valueFields.set(i, String.format("%.0f", value));
            }
            if (valueFields.get(i).equalsIgnoreCase("Working Balance + Amount = 5m")) {
                double value = 5000000 - Double.parseDouble(Serenity.sessionVariableCalled("Working Balance").toString().replace(",", ""));
                valueFields.set(i, String.format("%.0f", value));
            }
            if (valueFields.get(i).equalsIgnoreCase("Greater Today")) {
                valueFields.set(i, Serenity.sessionVariableCalled("DATE PLUS 1"));
            }
            if (valueFields.get(i).equalsIgnoreCase("TODAY - CHQ.ISS.DATE > MAX.DAYS.CHQ")) {
                int maxDayChq = Integer.parseInt(Serenity.sessionVariableCalled("Max Days Chq").toString().replace(",", ""));
                Date today = format.parse(Serenity.sessionVariableCalled("DATE PLUS 0"));
                cal.setTime(today);
                cal.add(Calendar.DATE, 0 - maxDayChq - 1);
                valueFields.set(i, format.format(cal.getTime()));
                Serenity.recordReportData().withTitle("Ngày hiện tại").andContents(Serenity.sessionVariableCalled("DATE PLUS 0") + "");
                Serenity.recordReportData().withTitle("MAX.DAYS.CHQ").andContents(maxDayChq + "");
                Serenity.recordReportData().withTitle("Cheque Iss Date").andContents(format.format(cal.getTime()) + "");
            }
            if (valueFields.get(i).equalsIgnoreCase("TODAY - CHQ.ISS.DATE <= MAX.DAYS.CHQ")) {
                int maxDayChq = Integer.parseInt(Serenity.sessionVariableCalled("Max Days Chq").toString().replace(",", ""));
                Date today = format.parse(Serenity.sessionVariableCalled("DATE PLUS 0"));
                cal.setTime(today);
                cal.add(Calendar.DATE, 0 - maxDayChq + 1);
                valueFields.set(i, format.format(cal.getTime()));
                Serenity.recordReportData().withTitle("Ngày hiện tại").andContents(Serenity.sessionVariableCalled("DATE PLUS 0") + "");
                Serenity.recordReportData().withTitle("MAX.DAYS.CHQ").andContents(maxDayChq + "");
                Serenity.recordReportData().withTitle("Cheque Iss Date").andContents(format.format(cal.getTime()) + "");
            }
            if (valueFields.get(i).equalsIgnoreCase("CHQ.INFOR.SPLIT1")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Filter ID").toString().split("-")[0]);
            }
            if (valueFields.get(i).equalsIgnoreCase("CHQ.INFOR.SPLIT2")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Filter ID").toString().split("-")[1]);
            }
            if (valueFields.get(i).equalsIgnoreCase("TODAY - CHQ.ISS.DATE > MAX.DAYS.COM.CHQ")) {
                int maxDayChq = Integer.parseInt(Serenity.sessionVariableCalled("Max Days Com Chq").toString().replace(",", ""));
                Date today = format.parse(Serenity.sessionVariableCalled("DATE PLUS 0"));
                cal.setTime(today);
                cal.add(Calendar.DATE, 0 - maxDayChq - 1);
                valueFields.set(i, format.format(cal.getTime()));
            }
            if (valueFields.get(i).equalsIgnoreCase("TODAY - CHQ.ISS.DATE <= MAX.DAYS.COM.CHQ")) {
                int maxDayChq = Integer.parseInt(Serenity.sessionVariableCalled("Max Days Com Chq").toString().replace(",", ""));
                Date today = format.parse(Serenity.sessionVariableCalled("DATE PLUS 0"));
                cal.setTime(today);
                cal.add(Calendar.DATE, 0 - maxDayChq + 1);
                valueFields.set(i, format.format(cal.getTime()));
            }
            if (valueFields.get(i).equalsIgnoreCase("AA+RandomNum6")) {
                valueFields.set(i, "AA" + CustomerMdtIndiv3Definitions.generateRandomNumber(6));
            }
            if (valueFields.get(i).equalsIgnoreCase("VND10001-TellerID-0001")) {
                valueFields.set(i, valueFields.get(i).replace("-TellerID-", Serenity.sessionVariableCalled("tellerId")));
            }
            if (valueFields.get(i).equalsIgnoreCase("USD10001-TellerID-0001")) {
                valueFields.set(i, valueFields.get(i).replace("-TellerID-", Serenity.sessionVariableCalled("tellerId")));
            }
            if (valueFields.get(i).equalsIgnoreCase("Greater EMB.AMT.HIGH")) {
                double value = Double.parseDouble(Serenity.sessionVariableCalled("Emb Amt High").toString().replace(",", "")) + 1;
                valueFields.set(i, String.format("%.0f", value));
            }
            if (valueFields.get(i).equalsIgnoreCase("Smaller EMB.AMT.HIGH")) {
                double value = Double.parseDouble(Serenity.sessionVariableCalled("Emb Amt High").toString().replace(",", "")) - 1;
                valueFields.set(i, String.format("%.0f", value));
            }
            if (valueFields.get(i).equalsIgnoreCase("RandomNum6")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(6));
            }
            if (valueFields.get(i).equalsIgnoreCase("$RandomNumBetWeen1And5")) {
                valueFields.set(i, String.valueOf(actionCommon.getNumInRange(1, 5)));
            }
            if (valueFields.get(i).equalsIgnoreCase("$RandomText")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomString(8));
            }
            if (valueFields.get(i).contains("$RandomNum-")) {
                int size = Integer.parseInt(valueFields.get(i).split("-", 2)[1]);
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomString(size));
            }
            if (valueFields.get(i).equalsIgnoreCase("$Ngay hien tai")) {
                valueFields.set(i, Serenity.sessionVariableCalled("Ngay hien tai"));
            }
        }
        inputData();
    }

    @And("Nhập thông tin mới mã Limit")
    public void inputInfoLIMIT() {
        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i).contains("review_frequency")) {
                valueFields.set(i, Serenity.sessionVariableCalled("YEAR PLUS").toString() + "M0101");
            }
            if (valueFields.get(i).contains("year-")) {
                valueFields.set(i, Serenity.sessionVariableCalled("YEAR PLUS").toString());
            }
            try {
                boolean limitIndustry = LimitComponent.LimitForm.LIMIT_INDUSTRY_1.resolveFor(theActorInTheSpotlight()).isPresent();
                if (limitIndustry) {
                    if (valueFields.get(i).contains("LIMIT_INDUSTRY")) {
                        valueFields.set(i, "42");
                    }
                }
                boolean limitIndustryAMT = LimitComponent.LimitForm.LIMIT_INDUSTRY_AMT_1.resolveFor(theActorInTheSpotlight()).isPresent();
                if (limitIndustryAMT) {
                    if (valueFields.get(i).contains("LIMIT_INDUSTRY_AMT")) {
                        valueFields.set(i, "1000000000");
                    }
                }
            } catch (Exception e) {

            }

        }
        inputData();
    }

    @And("Nhập form MD Deal")
    public void nhapFormMdDeal() throws ParseException {
        String date = "";
        List<Target> listXpath = getXpaths(getIdFields(), getValueFields());
        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i).contains("today plus")) {
                int change = Integer.parseInt(valueFields.get(i).split(" ")[2]);
                String type = valueFields.get(i).split(" ")[3];
                date = actionCommon.isWeekendAddOneWorkingDay(Serenity.sessionVariableCalled("DATE T24"), BaseStringUtils.FOMART_DATE_DD_MMM_YYYY, "ddMMyyyy", type, change);
                valueFields.set(i, date);
            }
            if (valueFields.get(i).contains("null fill")) {
                String textElement = actionCommon.getElement(listXpath.get(i).getCssOrXPathSelector()).getAttribute("value");
                if (textElement == null || textElement.isEmpty()) {
                    valueFields.set(i, valueFields.get(i).split("-")[1]);
                } else {
                    valueFields.set(i, "");
                }
            }
        }
        inputData();
    }

    @And("Nhập thông tin cho module PD.PAYMENT.DUE")
    public void nhapThongTinPdPaymentDue() {
        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }
            if (valueFields.get(i).contains("Random Text")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomString(8));
            }
            if (valueFields.get(i).contains("Random Num")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(6));
            }
            if (valueFields.get(i).equals("$Total-Repay-Amt")) {
                valueFields.set(i, Serenity.sessionVariableCalled("total-overdue"));
            }
            if (valueFields.get(i).equals("$CurrentDateT24")) {
                valueFields.set(i, Serenity.sessionVariableCalled("systemTime"));
            }
            if (valueFields.get(i).equals("customerId")) {
                valueFields.set(i, actionCommon.getValueSection("customerId"));
            }
            if (valueFields.get(i).contains("session-")) {
                valueFields.set(i, Serenity.sessionVariableCalled(valueFields.get(i).split("-", 2)[1]));
            }
        }
        inputData();
    }

    @And("Nhập dữ liệu vào form input của bản ghi")
    public void inputDataIntoRecord() {
        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }

            if (valueFields.get(i).equals("${timestamp}")) {
                valueFields.set(i, String.valueOf(System.currentTimeMillis()));
            }
            if (valueFields.get(i).contains("session-")) {
                valueFields.set(i, Serenity.sessionVariableCalled(valueFields.get(i).split("-", 2)[1]));
            }
            if (valueFields.get(i).contains("RandomChar-")) {
                String text = valueFields.get(i);
                int sess = Integer.parseInt(text.split("-", 2)[1]);
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomCharacter(sess));
            }
            String cellVal = valueFields.get(i);
            valueFields.set(i, actionCommon.retrieveSessionVariableValueFromText(cellVal));
        }
        inputData();
    }

    @And("Nhập thông tin cho module CUSTOMER")
    public void nhapThongTinModuleCustomer() {
        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }
            if (valueFields.get(i).contains("session-")) {
                valueFields.set(i, Serenity.sessionVariableCalled(valueFields.get(i).split("-", 2)[1]));
            }
            if (valueFields.get(i).contains("$RandomTextLength-")) {
                int length = Integer.parseInt(valueFields.get(i).split("-")[1]);
                String text = CustomerMdtIndiv3Definitions.generateRandomString(length);
                valueFields.set(i, text);
            }
            if (valueFields.get(i).contains("$RandomNumLength-")) {
                int length = Integer.parseInt(valueFields.get(i).split("-")[1]);
                String text = CustomerMdtIndiv3Definitions.generateRandomNumber(length);
                valueFields.set(i, text);
            }
            if (valueFields.get(i).contains("$RandomNumberLength-")) {
                int length = Integer.parseInt(valueFields.get(i).split("-")[1]);
                String text = CustomerMdtIndiv3Definitions.generateRandomNumber(length);
                valueFields.set(i, text);
            }
            if (valueFields.get(i).contains("randomCMT")) {
                String text = "08380000" + CustomerMdtIndiv3Definitions.generateRandomCharacter(2);
                valueFields.set(i, text);
            }
        }
        inputData();
    }

    @And("Nhập bản ghi letter credit")
    public void nhapBanGhiLetterCredit() {
        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }

            if (valueFields.get(i).contains("Random Text")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomString(8));
            }
            if (valueFields.get(i).contains("Random Num")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(6));
            }
            if (valueFields.get(i).contains("RandomNum-")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(Integer.parseInt(valueFields.get(i).split("-")[1])));
            }
            if (valueFields.get(i).contains("Random Num With Dot")) {
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(6) + "." + CustomerMdtIndiv3Definitions.generateRandomNumber(2));
            }
            if (valueFields.get(i).contains("session-")) {
                valueFields.set(i, Serenity.sessionVariableCalled(valueFields.get(i).split("-", 2)[1]));
            }
        }
        inputData();

    }

    @And("Nhập thông tin vào form nhập xuất ăn chi")
    public void nhapThongTinVaoFormNhapXuatAnChi() {
        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }
            if (valueFields.get(i).contains("${TU.CN}")) {
                valueFields.set(i, actionCommon.getValueSection("TU.CN"));
            }
            if (valueFields.get(i).contains("${DEN.CN}")) {
                valueFields.set(i, actionCommon.getValueSection("DEN.CN"));
            }
            if (valueFields.get(i).equals("$MA.AC")) {
                valueFields.set(i, actionCommon.getValueSection("MA.AC"));
            }
            if (valueFields.get(i).equals("greater_SL.AC")) {
                valueFields.set(i, String.valueOf(Integer.parseInt(actionCommon.getValueSection("SL.AC")) + 1));
            }
            if (valueFields.get(i).equals("${SL.AC}")) {
                valueFields.set(i, actionCommon.getValueSection("SL.AC"));
            }
            if (valueFields.get(i).equals("${SERI.START}")) {
                valueFields.set(i, actionCommon.getValueSection("SERI.START"));
            }

        }
        inputData();
    }

    @And("Nhập form tạo bản ghi Limit")
    public void nhapFormTaoLimit() {
        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }

            if (valueFields.get(i).contains("Random Num-")) {
                int length = Integer.parseInt(valueFields.get(i).split("-")[1]);
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(length));
            }

            if (valueFields.get(i).contains("session-")) {
                valueFields.set(i, Serenity.sessionVariableCalled(valueFields.get(i).split("-", 2)[1]));
            }
        }

        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }
            if (valueFields.get(i).contains("Equal-")) {
                String godField = valueFields.get(i).split("-")[1];
                String value = "";
                for (int j = 0; j < valueFields.size(); j++) {
                    System.out.println(idFields.get(j + 1));
                    if (idFields.get(j + 1).contains(godField)) {
                        value = valueFields.get(j);
                    }
                }
                valueFields.set(i, value);
            }
        }
        inputData();
    }

    @And("Nhập form tạo bản ghi hợp đồng tín dụng")
    public void nhapFormTaoBanGhiHopDongTinDungDen() {
        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }

            if (valueFields.get(i).contains("Random Num-")) {
                int length = Integer.parseInt(valueFields.get(i).split("-")[1]);
                valueFields.set(i, CustomerMdtIndiv3Definitions.generateRandomNumber(length));
            }

            if (valueFields.get(i).contains("session-")) {
                valueFields.set(i, Serenity.sessionVariableCalled(valueFields.get(i).split("-", 2)[1]));
            }
        }
        inputData();
    }

    @And("Nhập form tạo tài khoản thấu chi")
    public void nhapFormTaoTaiKhoanThauChi() {
        for (int i = 0; i < valueFields.size(); i++) {
            if (valueFields.get(i) == null || valueFields.get(i).equals("")) {
                continue;
            }

            if (valueFields.get(i).contains("session-")) {
                valueFields.set(i, Serenity.sessionVariableCalled(valueFields.get(i).split("-", 2)[1]));
            }
        }
        inputData();
    }
    //FPT_AnhDTN6

    @And("Lấy dữ liệu trường {string} và {string} gán vào session {string} và {string} theo điều kiện")
    public void getData(String columName1, String columName2, String name1, String name2, DataTable table) throws Exception {

        theActorInTheSpotlight().attemptsTo(WaitUntil.the(HomePageT24Form.LOADING_SCREEN, WebElementStateMatchers.isNotVisible())
                .forNoMoreThan(180).seconds());
        actionCommon.waitVisible(HomePageT24Form.FIRST_ROW_DATA_FILTER, 300);
        List<Map<String, String>> filterOptions = new ArrayList<>();
        List<String> lstAcc = new ArrayList<>();
        List<String> lstCus = new ArrayList<>();
        List<Map<String, String>> rows = table.asMaps(String.class, String.class);
        Random rand = SecureRandom.getInstanceStrong();
        for (Map<String, String> row : rows) {
            HashMap<String, String> option = new HashMap<>();

            if (row.get("columnName").isEmpty() || row.get("columnName").equals("")) {
                continue;
            }
//            Call session
            String valueToFiler = row.get("valueToFilter");
            valueToFiler = row.get("valueToFilter").contains("session-") ? Serenity.sessionVariableCalled(row.get("valueToFilter").split("-")[1]) : valueToFiler;

            option.put("columnName", row.get("columnName"));
            option.put("operator", row.get("operator"));
            option.put("valueToFilter", valueToFiler);
            filterOptions.add(option);
        }

        List<Map<String, String>> result = actionCommon.filterDataTableThenGetAll(filterOptions, 10);
        for (Map<String, String> row : result) {
            lstAcc.add(row.get("Account"));
            lstCus.add(row.get("Customer"));
        }

        int index = 0;
        if (result.size() > 1) {
            index = rand.nextInt(result.size() - 1);
        }
        String data1, data2;
//        Chọn  2 bản ghi cùng một cột
        if (columName1.equals(columName2)) {
//            Chọn bản ghi đầu tiên
            data1 = result.get(0).get(columName1);
            actionCommon.setValueSection(name1, data1);
//            Chọn bản ghi thứ 2 khác bản ghi thứ nhất
            for (int i = 1; i < result.size(); i++) {
                if (!(result.get(i).get(columName1).equals(data1))) {
                    actionCommon.setValueSection(name2, result.get(i).get(columName1));
                    break;
                }
            }

        }
//        Chọn 2 bản ghi cùng 1 hàng
        else {
            data1 = result.get(index).get(columName1);
            actionCommon.setValueSection(name1, data1);
            data2 = result.get(index).get(columName2);
            actionCommon.setValueSection(name2, data2);

        }

        actionCommon.setValueSection("listAcc", String.join(",", lstAcc));
        actionCommon.setValueSection("listCus", String.join(",", lstCus));
    }

    @And("Lấy dữ liệu trường {string} và {string} gán vào session {string} và {string} theo điều kiện và tìm từ trên xuống")
    public void getDataAndSearchFromFirstPage(String columName1, String columName2, String name1, String name2, DataTable table) throws Exception {
        List<Map<String, String>> filterOptions = new ArrayList<>();
        List<Map<String, String>> rows = table.asMaps(String.class, String.class);
        Random rand = SecureRandom.getInstanceStrong();
        for (Map<String, String> row : rows) {
            HashMap<String, String> option = new HashMap<>();

            if (row.get("columnName").isEmpty() || row.get("columnName").equals("")) {
                continue;
            }
//            Call session
            String valueToFiler = row.get("valueToFilter");
            valueToFiler = row.get("valueToFilter").contains("session-") ? Serenity.sessionVariableCalled(row.get("valueToFilter").split("-")[1]) : valueToFiler;

            option.put("columnName", row.get("columnName"));
            option.put("operator", row.get("operator"));
            option.put("valueToFilter", valueToFiler);

            filterOptions.add(option);
        }

        List<Map<String, String>> result = actionCommon.filterDataTableThenGetAll(filterOptions, 10);
        int index = 0;
        if (result.size() > 1) {
            index = rand.nextInt(result.size() - 1);
        }
        String data1, data2;
//        Chọn  2 bản ghi cùng một cột
        if (columName1.equals(columName2)) {
//            Chọn bản ghi đầu tiên
            data1 = result.get(0).get(columName1);
            actionCommon.setValueSection(name1, data1);
//            Chọn bản ghi thứ 2 khác bản ghi thứ nhất
            for (int i = 1; i < result.size(); i++) {
                if (!(result.get(i).get(columName1).equals(data1))) {
                    actionCommon.setValueSection(name2, result.get(i).get(columName1));
                    break;
                }
            }

        }
//        Chọn 2 bản ghi cùng 1 hàng
        else {
            data1 = result.get(index).get(columName1);
            actionCommon.setValueSection(name1, data1);
            data2 = result.get(index).get(columName2);
            actionCommon.setValueSection(name2, data2);

        }
    }

    //FPT_AnhDTN6
    @And("Get all data in columName {string} with condition")
    public void getAllDataInColumName(String columName, DataTable table) throws Exception {

        List<Map<String, String>> rows = table.asMaps(String.class, String.class);
        List<Map<String, String>> filterOptions = new ArrayList<>();

        for (Map<String, String> row : rows) {
            HashMap<String, String> option = new HashMap<>();
            theActorInTheSpotlight().attemptsTo(WaitUntil.the(HomePageT24Form.LOADING_SCREEN, WebElementStateMatchers.isNotPresent())
                    .forNoMoreThan(180).seconds());

            if (row.get("columnName").equals("") || row.get("columnName") == null) {
                continue;
            }

            String value = row.get("value");


            value = value.contains("session-") ? Serenity.sessionVariableCalled(value.split("-")[1]) : value;


            option.put("columnName", row.get("columnName"));
            option.put("operator", row.get("operator"));
            option.put("valueToFilter", value);

            filterOptions.add(option);

        }
        List<Map<String, String>> items = actionCommon.filterDataTableThenGetAll(filterOptions, 12);

        if (0 == items.size()) {
            throw new AssumptionViolatedException(
                    "NO RECORD");
        }
        List<String> accountNumbers = new ArrayList<>();

        for (Map<String, String> account : items) {
            accountNumbers.add(account.get(columName));

        }

        actionCommon.setValueSection("listData", String.join(",", accountNumbers));
        Serenity.recordReportData().withTitle("listData").andContents(String.join(",", accountNumbers));
    }

    //FPT_MAINT01
    @And("Nhập data Maturity Date hợp lệ cách date time hiện tại của T24 số ngày làm việc là {int}")
    public void inputDateMaturity(int number, DataTable dataTable) throws ParseException {
        List<Map<String, String>> list = dataTable.asMaps(String.class, String.class);

        String currentDate = Serenity.sessionVariableCalled("date time today");

        for (Map<String, String> item : list) {
            String dateTime = actionCommon.getDateTimeT24AddWorkingDays(currentDate, BaseStringUtils.FOMART_DATE_YYYYMMDD, number);

            actionCommon.setValueSection("ModifyDate", dateTime);
            Target maturityDate = AccountComponent.getDateTimeInputMaturity(item.get("field"));
            theActorInTheSpotlight().attemptsTo(
                    WaitUntil.the(maturityDate, WebElementStateMatchers.isVisible()),
                    Enter.theValue(dateTime).into(maturityDate).thenHit(Keys.TAB));
        }
    }


    public void createNewTK() throws Exception {
        actionCommonRTN.comeBackMenuT24();
        actionCommon.switchFrameByContainsIdFrame("menu");
        List<String> rows = new ArrayList<>(Arrays.asList("Retail user menu", "Truy van Autotest", "Truy van thong tin 3 bang LD , PD , LMM"));
        List<String> navigations = new ArrayList<>();
        for (int i = 0; i < rows.size(); i++) {
            if (rows.get(i).equals("KEY_GB_COMPANY_NAME")) {
                navigations.add(Serenity.sessionVariableCalled("KEY_GB_COMPANY_NAME"));
            } else {
                navigations.add(rows.get(i));
            }
            Target targetNavigation = HomePageT24Form.getNavigationItem(navigations);
            WaitUntil.the(targetNavigation, WebElementStateMatchers.isClickable()).
                    forNoMoreThan(60).seconds();
            Target expandedNavigation = HomePageT24Form.getExpandedNavigationItem(targetNavigation.getCssOrXPathSelector());
            if (i != rows.size() - 1) {
                try {
                    JavascriptExecutor js = (JavascriptExecutor) getDriver();
                    js.executeScript("arguments[0].setAttribute('style', 'display: block;')",
                            getDriver().findElement(By.xpath(expandedNavigation.getCssOrXPathSelector())));
                } catch (Exception e) {
                    // Do nothing
                }
            } else {
                actionCommon.clickElement(targetNavigation);
            }
        }

        actionCommon.switchToChildWindowsWithContainsTitle("Truy van thong tin LD va PD");
        // Điền thông tin vào form tìm kiếm
        actionCommon.clickElement(MbRmDoiTacComponent.clearSelection());
        actionCommon.typeText(HomePageT24Form.getSearchKey("LD.SCH"), "1");
        actionCommon.clickRunSelection();

        // Lấy ID ngẫu nhiên
        List<Map<String, String>> filterOptions = new ArrayList<>();
        Map<String, String> result = actionCommon.filterDataTableAndGetFirstItem(filterOptions);
        String customer = result.get("CUSTOMER");
        String currency = result.get("CURRENCY");
        Serenity.setSessionVariable("customerId").to(customer);
        Serenity.recordReportData().withTitle("customerId").andContents(Serenity.sessionVariableCalled("customerId"));
        Serenity.setSessionVariable("currency").to(currency);
        Serenity.recordReportData().withTitle("Currency").andContents(Serenity.sessionVariableCalled("currency"));

        // Lấy giá trị ID và CustomerID tương ứng
        actionCommonRTN.comeBackMenuT24();
        actionCommon.switchFrameByContainsIdFrame("menu");
        actionCommon.searchCommandLineForm("ACCOUNT,STOCK.MB");
        actionCommon.switchToChildWindowsWithContainsTitle("ACCOUNT");

        // Điền thông tin vào form
        actionCommon.enterValueIntoField(T24CamRates.Rates.SEARCH_FIELD, "1");
        actionCommon.typeText(BondsBatchMbComponent.inputValueWithLabel("Customer"), customer);
        actionCommon.typeText(BondsBatchMbComponent.inputValueWithLabel("Category"), "1001");
        actionCommon.typeText(BondsBatchMbComponent.inputValueWithLabel("Currency"), currency);
        actionCommon.typeText(BondsBatchMbComponent.inputValueWithLabel("Prt Code"), "41");
        actionCommon.typeText(BondsBatchMbComponent.inputValueWithLabel("Account Officer"), "1");
        Serenity.setSessionVariable("customerNumber").to(actionCommon.getAttributeElement(FundsTransferComponent.FT_TEXT_XPATH, "value"));
        Serenity.recordReportData().withTitle("customerNumber").andContents(Serenity.sessionVariableCalled("customerNumber"));
        actionCommon.clickCommitTheDeal();

    }

    //maipd
    @Then("Hệ thống không hiển thị text: {}")
    public void heThongKhongHienTxnComplete(String message) {
        actionCommon.waitVisible(Caption_Error);
        String caption = actionCommon.getTextOf(Caption_Error);
        theActorInTheSpotlight().attemptsTo(Ensure.that(caption).doesNotContain(message));

        Serenity.recordReportData().withTitle("text display").andContents(caption);
    }

    @And("Lấy dữ liệu trường {string} và {string} ở {int} trang cuối và gán vào session {string} {string} theo điều kiện")
    public void lấyDữLiệuTrườngVàỞTrangCuốiVàGánVàoSessionTheoĐiềuKiện(String columName1, String columName2, int page, String name1, String name2, DataTable table) throws Exception {
        List<Map<String, String>> filterOptions = new ArrayList<>();
        List<Map<String, String>> rows = table.asMaps(String.class, String.class);
        Random rand = SecureRandom.getInstanceStrong();
        for (Map<String, String> row : rows) {
            HashMap<String, String> option = new HashMap<>();

            if (row.get("columnName").isEmpty() || row.get("columnName").equals("")) {
                continue;
            }
//            Call session
            String valueToFiler = row.get("valueToFilter");
            valueToFiler = row.get("valueToFilter").contains("session-") ? Serenity.sessionVariableCalled(row.get("valueToFilter").split("-")[1]) : valueToFiler;

            option.put("columnName", row.get("columnName"));
            option.put("operator", row.get("operator"));
            option.put("valueToFilter", valueToFiler);

            filterOptions.add(option);
        }

        List<Map<String, String>> result = actionCommon.filterDataTableThenGetAllFromBack(filterOptions, page);
        int index = 0;
        if (result.size() > 1) {
            index = rand.nextInt(result.size() - 1);
        }
        String data1, data2;
//        Chọn  2 bản ghi cùng một cột
        if (columName1.equals(columName2)) {
//            Chọn bản ghi đầu tiên
            data1 = result.get(0).get(columName1);
            actionCommon.setValueSection(name1, data1);
//            Chọn bản ghi thứ 2 khác bản ghi thứ nhất
            for (int i = 1; i < result.size(); i++) {
                if (!(result.get(i).get(columName1).equals(data1))) {
                    actionCommon.setValueSection(name2, result.get(i).get(columName1));
                    break;
                }
            }

        }
//        Chọn 2 bản ghi cùng 1 hàng
        else {
            data1 = result.get(index).get(columName1);
            actionCommon.setValueSection(name1, data1);
            data2 = result.get(index).get(columName2);
            actionCommon.setValueSection(name2, data2);

        }
    }

    @Then("Check đăng ký dịch vụ SMSBanking trước khi giải ngân")
    public void checkSMSBankingBeforeDisbur() {
        //Một vài case lúc tạo Cus chưa đăng kí sms nên bh nó sổ ra màn này bắt phải đk
        actionCommon.pause(5000);
        try {
            actionCommon.switchToChildWindowsWithContainsTitle("MB.CREDIT.CONTRACT");
            actionCommon.switchToDefaultContent();

            //            Nhập sđt
            actionCommon.typeText(CustomerComponent.CustomerForm.elementCustomerDynamic("mainTab", "fieldName:CUST.PHONE:1"), "211111323");
            actionCommon.clickTab(CustomerComponent.CustomerForm.elementCustomerDynamic("mainTab", "fieldName:CUST.PHONE:1"));
            //            Nhập email
            actionCommon.typeText(CustomerComponent.CustomerForm.elementCustomerDynamic("mainTab", "fieldName:CUST.EMAIL:1"), "demo@gmail.com");
            actionCommon.clickTab(CustomerComponent.CustomerForm.elementCustomerDynamic("mainTab", "fieldName:CUST.EMAIL:1"));
            //            Nhập Loại dịch vụ
            actionCommon.typeText(CustomerComponent.CustomerForm.elementCustomerDynamic("mainTab", "fieldName:SERVICE.TYPE:1"), "SMS.KHOAN.VAY");
            actionCommon.clickTab(CustomerComponent.CustomerForm.elementCustomerDynamic("mainTab", "fieldName:SERVICE.TYPE:1"));
            //            Nhập ngày ĐK dịch vụ
            actionCommon.typeText(CustomerComponent.CustomerForm.elementCustomerDynamic("mainTab", "fieldName:SERVICE.DATE:1"), "12 APR 2021");
            actionCommon.clickTab(CustomerComponent.CustomerForm.elementCustomerDynamic("mainTab", "fieldName:SERVICE.DATE:1"));
            //            Chọn Loại thông báo
            actionCommon.clickElement(AccountComponent.HIDE_DROPLIST("Loai thong bao.1"));
            actionCommon.clickElement(AccountComponent.HIDE_DROPLIST_ITEM("Loai thong bao.1", "Nhac.no"));
            //            Chọn lại thu phí
            actionCommon.clickElement(AccountComponent.HIDE_DROPLIST("Loai thu phi.1"));
            actionCommon.clickElement(AccountComponent.HIDE_DROPLIST_ITEM("Loai thu phi.1", "Mien.phi"));
            //Commit
            actionCommon.clickCommitTheDeal();
            if (actionCommon.existElement(FundsTransferComponent.OutWardRemittancesForm.ACCEPT_OVERRIDES.getCssOrXPathSelector()) != null) {
                theActorInTheSpotlight().attemptsTo(
                        Click.on(FundsTransferComponent.OutWardRemittancesForm.ACCEPT_OVERRIDES)
                );
                WaitUntil.the(FundsTransferComponent.OutWardRemittancesForm.ACCEPT_OVERRIDES, isNotVisible());
            }
            // Đóng màn hình và trở về màn LD
            getDriver().close();
            actionCommon.switchToChildWindowsWithContainsTitle("LOANS.AND.DEPOSITS");
            actionCommon.switchToDefaultContent();
        } catch (Exception e) {
            actionCommon.switchToChildWindowsWithContainsTitle("LOANS.AND.DEPOSITS");
            actionCommon.switchToDefaultContent();
        }
        String title = getDriver().getTitle();
    }
}
